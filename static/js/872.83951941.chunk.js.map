{"version":3,"file":"static/js/872.83951941.chunk.js","mappings":"uLAOA,MAoyCA,EApyCqB,CACjBA,KAAM,eACNC,QAAS,+gHAyCTC,YAAa,oDACbC,YAAa,oBACbC,IAAK,gyfA0wBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,qBACXC,MAAO,+DAGPC,KAAM,CAAC,CACXC,MAAO,eACPR,YAAa,8JACbS,KAAM,8zBAuBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,cACPR,YAAa,2BACbS,KAAM,qwFAqGNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,qBACPR,YAAa,+GACbS,KAAM,+3EAkDNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,cACPR,YAAa,qBACbS,KAAM,osOA8NNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,KAEb,CACEJ,MAAO,MACPR,YAAa,oCACbS,KAAM,ujBAuBNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,gCACbU,gBAAiB,oDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_super-select';\nimport * as component_2 from 'antd';\nimport '@kne/current-lib_super-select/dist/index.css';\nimport '@kne/current-lib_super-select/dist/index.css';\nimport '@kne/current-lib_super-select/dist/index.css';\nimport '@kne/current-lib_super-select/dist/index.css';\nimport '@kne/current-lib_super-select/dist/index.css';\nconst readmeConfig = {\n    name: `super-select`,\n    summary: `<p>@kne/super-select 是一个功能强大的 React 组件库，专门用于处理复杂的信息选择场景。它提供了一系列灵活且可组合的组件，使得在 React 应用中实现复杂的选择功能变得简单直观。</p>\n<h3>主要功能</h3>\n<ul>\n<li>支持多种选择模式（单选、多选）</li>\n<li>提供灵活的列表和表格展示方式</li>\n<li>内置标签式选中项展示</li>\n<li>支持全选/反选功能</li>\n<li>内置国际化支持（中文和英文）</li>\n<li>自定义样式支持（基于CSS Modules）</li>\n</ul>\n<h3>组件概述</h3>\n<h4>SelectInput</h4>\n<p>基础选择输入组件，提供核心的选择功能和状态管理。可以独立使用，也可以作为其他选择组件的基础。</p>\n<h4>SelectList</h4>\n<p>基于 SelectInput 的列表选择组件，适用于常规的列表选择场景。提供了简洁的列表界面和直观的选择交互。</p>\n<h4>SelectTableList</h4>\n<p>表格形式的选择组件，适用于需要展示多列数据的选择场景。支持自定义列配置和表格样式。</p>\n<h4>SelectedAll</h4>\n<p>全选功能组件，提供一键选择/取消选择所有项的功能。可以与其他选择组件配合使用。</p>\n<h4>SelectTree</h4>\n<p>树形选择组件，适用于层级数据的展示和选择。支持展开/折叠节点，并提供灵活的节点渲染方式。</p>\n<h4>SelectedTagList</h4>\n<p>已选项标签列表组件，以标签形式展示已选中的项目。支持单个标签删除和清空所有已选项。</p>\n<h3>使用场景</h3>\n<ul>\n<li>复杂的数据筛选和选择</li>\n<li>多条件组合查询</li>\n<li>批量操作数据</li>\n<li>表格数据的多选处理</li>\n<li>带标签展示的数据选择</li>\n<li>需要全选/反选功能的列表操作</li>\n</ul>\n<h3>技术特点</h3>\n<ul>\n<li>基于 React 开发</li>\n<li>使用 CSS Modules 进行样式隔离</li>\n<li>支持 ES6+ 语法</li>\n<li>模块化设计，组件可独立使用</li>\n<li>支持主题定制</li>\n<li>完善的类型定义支持</li>\n</ul>`,\n    description: `用于复杂信息选择.`,\n    packageName: `@kne/super-select`,\n    api: `<h4>SelectInput</h4>\n<p>基础选择输入组件，提供核心的选择功能和状态管理。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, item, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否支持多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最多可选数量</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>自定义渲染内容</td>\n<td>function(props)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n<tr>\n<td>getContainer</td>\n<td>指定下拉菜单挂载的 HTML 节点</td>\n<td>function</td>\n<td>() =&gt; document.body</td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>菜单渲染父节点</td>\n<td>function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n</tr>\n<tr>\n<td>onExceed</td>\n<td>超出最大可选数量时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>SelectList</h4>\n<p>基于 SelectInput 的列表选择组件，适用于常规的列表选择场景。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, item, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否支持多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最多可选数量</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>自定义列表项渲染</td>\n<td>function(item, index)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>emptyContent</td>\n<td>无数据时的显示内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n<tr>\n<td>onExceed</td>\n<td>超出最大可选数量时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>itemClassName</td>\n<td>列表项自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>itemStyle</td>\n<td>列表项自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>SelectTableList</h4>\n<p>表格形式的选择组件，适用于需要展示多列数据的选择场景。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, item, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否支持多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最多可选数量</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>表格列配置</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>emptyContent</td>\n<td>无数据时的显示内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n<tr>\n<td>onExceed</td>\n<td>超出最大可选数量时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rowClassName</td>\n<td>行自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rowStyle</td>\n<td>行自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerClassName</td>\n<td>表头自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerStyle</td>\n<td>表头自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h5>columns 配置项</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>列标题</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataIndex</td>\n<td>列数据在数据项中对应的路径</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>key</td>\n<td>React key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>render</td>\n<td>自定义渲染函数</td>\n<td>function(text, record, index)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>列宽度</td>\n<td>string | number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>列自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>列自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>SelectedAll</h4>\n<p>全选功能组件，提供一键选择/取消选择所有项的功能。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>自定义渲染内容</td>\n<td>function(props)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n</tbody>\n</table>\n<h4>SelectTree</h4>\n<p>树形选择组件，适用于层级数据的展示和选择。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, item, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否支持多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最多可选数量</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>自定义树节点渲染</td>\n<td>function(item, index)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>emptyContent</td>\n<td>无数据时的显示内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n<tr>\n<td>onExceed</td>\n<td>超出最大可选数量时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选择时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>SelectedTagList</h4>\n<p>已选项标签列表组件，以标签形式展示已选中的项目。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>当前选中的值</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值变化时的回调函数</td>\n<td>function(value, item, {type})</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>数据源</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>idField</td>\n<td>数据项唯一标识字段</td>\n<td>string</td>\n<td>'id'</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>自定义标签渲染</td>\n<td>function(item, index)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>emptyContent</td>\n<td>无数据时的显示内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>locale</td>\n<td>国际化配置</td>\n<td>object</td>\n<td>默认中文</td>\n</tr>\n<tr>\n<td>onRemove</td>\n<td>移除标签时的回调</td>\n<td>function(value, item)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClear</td>\n<td>清空所有标签时的回调</td>\n<td>function(value)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>showClear</td>\n<td>是否显示清空按钮</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>tagClassName</td>\n<td>标签自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tagStyle</td>\n<td>标签自定义样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>国际化配置</h4>\n<p>组件内置了中文和英文两种语言配置，默认使用中文。可以通过 <code>locale</code> 属性进行自定义配置。</p>\n<pre><code class=\"language-jsx\">import { zhCN, enUS } from '@kne/super-select/locale';\n\n// 使用英文\n&lt;SelectList locale={enUS} /&gt;\n\n// 自定义部分文案\n&lt;SelectList locale={{\n  ...zhCN,\n  empty: '暂无数据',\n  selectAll: '全选',\n  clearAll: '清空'\n}} /&gt;\n</code></pre>\n<h5>可配置的文案</h5>\n<table>\n<thead>\n<tr>\n<th>键名</th>\n<th>说明</th>\n<th>默认中文值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty</td>\n<td>无数据时的提示文案</td>\n<td>暂无数据</td>\n</tr>\n<tr>\n<td>selectAll</td>\n<td>全选按钮文案</td>\n<td>全选</td>\n</tr>\n<tr>\n<td>clearAll</td>\n<td>清空按钮文案</td>\n<td>清空</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>已选文案</td>\n<td>已选</td>\n</tr>\n<tr>\n<td>items</td>\n<td>项文案</td>\n<td>项</td>\n</tr>\n<tr>\n<td>exceed</td>\n<td>超出限制提示文案</td>\n<td>最多只能选择 {max} 项</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `super_select_b8606`,\n        style: `.super_select_b8606 .max-width-150 {\n  max-width: 150px;\n}`,\n        list: [{\n    title: `select-input`,\n    description: `用于显示一个选择框，可以下拉展开选项或者以modal展示选项`,\n    code: `const { SelectInput } = _SuperSelect;\nconst { Space, Flex } = antd;\n\nconst BaseExample = () => {\n  return <Flex vertical gap={8}>\n    <Space>\n      <SelectInput />\n      <SelectInput defaultValue={[{ value: 0, label: '第一项' }, { value: 1, label: '第二项' }]} />\n      <SelectInput defaultValue={[{ value: 'all', label: '全选' }]} />\n      <SelectInput className=\"max-width-150\" defaultValue={Array.from({ length: 10 }).map((value, index) => {\n        return { value: index, label: \\`第\\${index}项\\` };\n      })} />\n      <SelectInput defaultValue={[{ value: 0, label: '第一项' }, { value: 1, label: '第二项' }]} disabled />\n    </Space>\n    <Space>\n      <SelectInput isPopup={false}/>\n    </Space>\n  </Flex>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_SuperSelect\",\n    packageName: \"@kne/current-lib_super-select\",\n    importStatement: \"import * as _SuperSelect from \\\"@kne/super-select\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `select-list`,\n    description: `列表选择`,\n    code: `const { default: SuperSelect } = _SuperSelect;\nconst { Space, Button } = antd;\n\nconst optionList = Array.from({ length: 20 }).map((item, key) => {\n  return {\n    label: \\`第\\${key + 1}项\\`,\n    value: key + 1,\n    disabled: key === 1\n  };\n});\n\nconst BaseExample = () => {\n  return (\n    <Space wrap>\n      <SuperSelect options={optionList} suffix={<Button type=\"text\">预览</Button>} prefix={<Button type=\"text\">查看</Button>} />\n      <SuperSelect\n        single\n        options={[\n          ...optionList,\n          {\n            value: 'other',\n            label: '超长label项超长label项超长label项超长label项超长label项超长label项超长label项超长label项'\n          }\n        ]}\n      />\n      <SuperSelect\n        allowSelectedAll\n        options={optionList}\n        maxLength={10}\n        getSearchCallback={({ searchText }, item) => {\n          return !searchText || item.label.indexOf(searchText) > -1;\n        }}\n      />\n      <SuperSelect\n        allowSelectedAll\n        options={optionList}\n        isPopup={false}\n        getSearchCallback={({ searchText }, item) => {\n          return !searchText || item.label.indexOf(searchText) > -1;\n        }}\n      />\n      <SuperSelect\n        api={{\n          data: {},\n          loader: ({ data }) => {\n            const searchText = data.searchProps && data.searchProps.searchText;\n            if (!searchText) {\n              return {\n                pageData: optionList,\n                totalCount: optionList.length\n              };\n            }\n            const newOptionList = optionList.filter(item => !searchText || item.label.indexOf(searchText) > -1);\n            return {\n              pageData: newOptionList,\n              totalCount: newOptionList.length\n            };\n          }\n        }}\n        isPopup={false}\n        getSearchProps={({ searchText }) => {\n          return { searchText };\n        }}\n      />\n\n      <SuperSelect\n        defaultOpen\n        options={optionList}\n        inputRender={({ value }) => {\n          return <Button type=\"link\">编辑</Button>;\n        }}\n      />\n\n      <SuperSelect\n        options={optionList}\n        footer={({ close, reload }) => {\n          return (\n            <Button type=\"link\" onClick={reload}>\n              添加\n            </Button>\n          );\n        }}\n      />\n\n      <SuperSelect\n        options={[]}\n        footer={({ close, reload }) => {\n          return (\n            <Button type=\"link\" onClick={reload}>\n              添加\n            </Button>\n          );\n        }}\n      />\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_SuperSelect\",\n    packageName: \"@kne/current-lib_super-select\",\n    importStatement: \"import * as _SuperSelect from \\\"@kne/super-select\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `select--table-list`,\n    description: `表格列表选择，适合更加复杂的数据选择`,\n    code: `const { SelectTableList } = _SuperSelect;\nconst { Space, Button, Divider } = antd;\n\nconst optionList = Array.from({ length: 20 }).map((item, key) => {\n  return {\n    id: key + 1, label: \\`名称\\${key + 1}\\`, count: key + 1, description: \\`描述\\${key + 1}\\`, disabled: key === 1\n  };\n});\n\nconst columns = [{\n  name: 'label', title: '名称', span: 8\n}, {\n  name: 'count', title: '数量', span: 8\n}, {\n  name: 'description', title: '描述', span: 8\n}];\n\nconst BaseExample = () => {\n  return <Space wrap>\n    <SelectTableList options={optionList} columns={columns} valueKey=\"id\" footer={<Button type=\"link\">预览</Button>} />\n    <SelectTableList single options={optionList} columns={columns} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} />\n    <SelectTableList allowSelectedAll options={optionList} columns={columns} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} getSearchCallback={({ searchText }, item) => {\n      return !searchText || item.label.indexOf(searchText) > -1;\n    }} />\n    <SelectTableList options={optionList} columns={columns} isPopup={false} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} />\n    <SelectTableList allowSelectedAll options={optionList} columns={columns} isPopup={false} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} getSearchCallback={({ searchText }, item) => {\n      return !searchText || item.label.indexOf(searchText) > -1;\n    }} />\n    <SelectTableList single options={optionList} columns={columns} isPopup={false} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} />\n    <SelectTableList single options={[]} columns={columns} isPopup={false} valueKey=\"id\"\n                     footer={<Button type=\"link\">预览</Button>} />\n    <div>\n      <Divider />\n      <SelectTableList options={optionList} columns={columns} isPopup={false} valueKey=\"id\"\n                       getSearchCallback={({ searchText }, item) => {\n                         return !searchText || item.label.indexOf(searchText) > -1;\n                       }}\n                       footer={<Button type=\"link\">预览</Button>} renderContent={(target) => target} />\n    </div>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_SuperSelect\",\n    packageName: \"@kne/current-lib_super-select\",\n    importStatement: \"import * as _SuperSelect from \\\"@kne/super-select\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `select-tree`,\n    description: `树选择`,\n    code: `const { SelectTree } = _SuperSelect;\nconst { Space, Button } = antd;\n\nconst options = [\n  {\n    id: '216822533465310208',\n    parentId: '216822162877580288',\n    name: '点点滴滴',\n    description: '点点滴滴',\n    index: 0,\n    createdAt: '2025-08-21T07:35:20.346Z',\n    updatedAt: '2025-08-21T07:35:20.346Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216827588281107456',\n    parentId: '216822162877580288',\n    name: '都是发的身份',\n    description: '水电费是的水电费水电费',\n    index: 0,\n    createdAt: '2025-08-21T07:55:25.508Z',\n    updatedAt: '2025-08-21T07:55:25.508Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216820469385397248',\n    parentId: null,\n    name: '水电费水电费是11111',\n    description: '水电费水电费是的撒地方水电费水电费水电费水电费水电费水电费水电费水电费水电费水电费水电费水电费水电费的身份',\n    index: 0,\n    createdAt: '2025-08-21T07:27:08.230Z',\n    updatedAt: '2025-08-21T08:16:50.232Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216838887668974592',\n    parentId: '216822162877580288',\n    name: '水电费水电费',\n    description: '电饭锅梵蒂冈电饭锅',\n    index: 0,\n    createdAt: '2025-08-21T08:40:19.491Z',\n    updatedAt: '2025-08-21T08:40:19.491Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216838908569191424',\n    parentId: '216822162877580288',\n    name: '电饭锅电饭锅',\n    description: '电饭锅电饭锅电饭锅电饭锅电饭锅',\n    index: 0,\n    createdAt: '2025-08-21T08:40:24.475Z',\n    updatedAt: '2025-08-21T08:40:24.475Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216838930408932352',\n    parentId: '216822162877580288',\n    name: '规范化风格化',\n    description: '风格化风格化风格化风格化风格化',\n    index: 0,\n    createdAt: '2025-08-21T08:40:29.682Z',\n    updatedAt: '2025-08-21T08:40:29.682Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216843395140682752',\n    parentId: null,\n    name: '水电费的身份',\n    description: '水电费是的的身份',\n    index: 0,\n    createdAt: '2025-08-21T08:58:14.156Z',\n    updatedAt: '2025-08-21T08:58:14.156Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216844313588401152',\n    parentId: '216843395140682752',\n    name: '水电费水电费',\n    description: '身份是的水电费水电费',\n    index: 0,\n    createdAt: '2025-08-21T09:01:53.132Z',\n    updatedAt: '2025-08-21T09:01:53.132Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216844336053093376',\n    parentId: '216843395140682752',\n    name: '水电费水电费',\n    description: '水电费水电费水电费水电费水电费',\n    index: 0,\n    createdAt: '2025-08-21T09:01:58.488Z',\n    updatedAt: '2025-08-21T09:01:58.488Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216844365669073920',\n    parentId: '216844313588401152',\n    name: '水电费水电费',\n    description: '水电费水电费水电费水电费发大水',\n    index: 0,\n    createdAt: '2025-08-21T09:02:05.548Z',\n    updatedAt: '2025-08-21T09:02:05.548Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216844381611623424',\n    parentId: '216844336053093376',\n    name: '的身份水电费是的',\n    description: null,\n    index: 0,\n    createdAt: '2025-08-21T09:02:09.349Z',\n    updatedAt: '2025-08-21T09:02:09.349Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216844403434587136',\n    parentId: '216843395140682752',\n    name: '水电费水电费水电费是的',\n    description: null,\n    index: 0,\n    createdAt: '2025-08-21T09:02:14.553Z',\n    updatedAt: '2025-08-21T09:02:14.553Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216822162877580288',\n    parentId: '216820469385397248',\n    name: '水电费是的',\n    description: '水电费水电费的身份水电费11111',\n    index: 0,\n    createdAt: '2025-08-21T07:33:51.990Z',\n    updatedAt: '2025-08-21T09:09:38.933Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216847218563351552',\n    parentId: null,\n    name: '水电费是的',\n    description: '的身份是的的身份水电费',\n    index: 0,\n    createdAt: '2025-08-21T09:13:25.732Z',\n    updatedAt: '2025-08-21T09:13:25.732Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216854106755564544',\n    parentId: '216847218563351552',\n    name: '让是非得失的',\n    description: '电饭锅地方地方电饭锅电饭锅',\n    index: 0,\n    createdAt: '2025-08-21T09:40:48.005Z',\n    updatedAt: '2025-08-21T09:40:48.005Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216854194546541568',\n    parentId: '216847218563351552',\n    name: '电饭锅电饭锅电饭锅',\n    description: '电饭锅电饭锅地方电饭锅电饭锅',\n    index: 0,\n    createdAt: '2025-08-21T09:41:08.936Z',\n    updatedAt: '2025-08-21T09:41:08.936Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  },\n  {\n    id: '216856947163399168',\n    parentId: null,\n    name: '发水电费是的',\n    description: '发的电饭锅地方个电饭锅电饭锅电饭锅地方',\n    index: 0,\n    createdAt: '2025-08-21T09:52:05.211Z',\n    updatedAt: '2025-08-21T09:52:05.211Z',\n    deletedAt: null,\n    tenantId: '216429049541559296'\n  }\n];\n\nconst BaseExample = () => {\n  return (\n    <Space wrap>\n      <SelectTree options={options} valueKey=\"id\" labelKey=\"name\" />\n\n      <SelectTree single options={options} valueKey=\"id\" labelKey=\"name\" />\n\n      <SelectTree\n        name=\"tree\"\n        label=\"树选择\"\n        options={[\n          {\n            value: '1',\n            label: '父节点'\n          },\n          {\n            value: '2',\n            label: '子节点',\n            parentId: '1'\n          }\n        ]}\n      />\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_SuperSelect\",\n    packageName: \"@kne/current-lib_super-select\",\n    importStatement: \"import * as _SuperSelect from \\\"@kne/super-select\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `ref`,\n    description: `展示ref的使用`,\n    code: `const { default: SuperSelect } = _SuperSelect;\nconst { Space, Button } = antd;\nconst { useRef } = React;\n\nconst optionList = Array.from({ length: 20 }).map((item, key) => {\n  return {\n    label: \\`第\\${key + 1}项\\`, value: key + 1, disabled: key === 1\n  };\n});\n\nconst BaseExample = () => {\n  const ref = useRef();\n  return <Space wrap>\n    <SuperSelect options={optionList} ref={ref} />\n    <Button onClick={() => {\n      ref.current.onOpenChange(true);\n    }}>打开弹窗</Button>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_SuperSelect\",\n    packageName: \"@kne/current-lib_super-select\",\n    importStatement: \"import * as _SuperSelect from \\\"@kne/super-select\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component"],"sourceRoot":""}