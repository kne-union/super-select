{"version":3,"file":"static/js/830.a17a90bf.chunk.js","mappings":"86BAEO,MAAMA,GAAUC,EAAAA,EAAAA,kBAEV,SAAEC,EAAQ,WAAEC,GAAeH,E,kHCJxC,MAAMI,EAAS,CACXC,YAAa,qBACbC,UAAW,eACXC,SAAU,eACVC,OAAQ,eACRC,SAAU,iBACVC,eAAgB,8DAChBC,gBAAiB,4E,eCqBfC,EAAeC,IAA6B,IAA5B,SAAEC,GAAqBD,EAARE,EAAMC,EAAAH,EAAAI,GACzC,MAAM,KAAEC,EAAMC,MAAOC,GAAeL,GAC7BI,EAAOE,IAAYC,EAAAA,EAAAA,UAASF,IACnCG,EAAAA,EAAAA,WAAU,KACJL,IAASM,IAAQL,EAAOC,IAC1BC,EAASD,IAEV,CAACF,IACJ,MAAMO,EAAeC,OAAOC,OAAO,CAAC,EAAGZ,EAAQ,CAC7CI,QACAE,WACAO,WAAYA,IAAMb,EAAOM,SAASF,GAClCU,MAAOC,GAAQf,EAAOc,MAAMC,EAAMT,GAClCU,SAAUD,GAAQf,EAAOgB,SAASD,EAAMT,GACxCW,SAAUF,GAAQf,EAAOiB,SAASF,EAAMT,GACxCP,aAGF,OAAOmB,IAAAA,cAAC/B,EAAQ,CAACiB,MAAOM,GAAeX,EAASW,KAG5CS,GAAcC,EAAAA,EAAAA,wBAAuB,CACzCC,cAAe,QACfC,UAAW,eACXC,SAAU,CACR,QAASlC,EACT,QCtDW,CACXC,YAAa,gBACbC,UAAW,aACXC,SAAU,WACVC,OAAQ,SACRC,SAAU,iBACVC,eAAgB,+CAChBC,gBAAiB,uDD0CDwB,EAQlBI,EAAAA,EAAAA,YAAW,CAACC,EAAGC,KACb,MAAMC,GAAOC,EAAAA,EAAAA,YACP,cAAEC,GAAkBF,EACpBG,EAAQnB,OAAOC,OACnB,CAAC,EACD,CACEb,SAAUA,IAAM8B,EAAc,CAAEE,GAAI,oBACpCC,UAAW,KACXC,aAAa,EACbC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACT9C,YAAauC,EAAc,CAAEE,GAAI,gBACjCM,kBAAmBR,EAAc,CAAEE,GAAI,WACvCO,aAAc,KACdC,kBAAkB,EAClBC,SAAU,QACVC,SAAU,QACVC,iBAAkB,CAAEtC,MAAO,MAAOuC,MAAOd,EAAc,CAAEE,GAAI,eAC7Da,UAAW,aACXC,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,OAAQ,KACRC,OAAQ,KACRC,MAAO,KACPC,YAAazC,IACX,MAAM,MAAEoB,EAAK,KAAE3B,EAAI,WAAEU,EAAU,aAAEuC,GAAiB1C,GAC5C,YAAEpB,EAAW,SAAES,GAAa+B,EAClC,OACEZ,IAAAA,cAACmC,EAAAA,MAAK,CACJC,MAAO,IACPnD,KAAMA,EACNoD,MAAOjE,EACPkE,SAAUA,KACRJ,GAAa,IAEfK,KAAMA,KACJ5C,IACAuC,GAAa,KAGdrD,EAASW,MAKlBe,GAGFK,EAAMY,iBAAmB,CACvB,CAACZ,EAAMW,UAAWX,EAAMY,iBAAiBtC,MACzC,CAAC0B,EAAMU,UAAWV,EAAMY,iBAAiBC,OAG3C,MAAM,SAAE5C,EAAQ,OAAEiD,EAAM,OAAEC,EAAM,UAAES,EAAS,UAAE1B,EAAS,iBAAE2B,EAAgB,OAAEzB,EAAM,UAAEW,EAAS,QAAET,EAAO,WAAEW,EAAU,SAAEZ,EAAQ,YAAE7C,EAAW,iBAAEoD,EAAgB,aAAEkB,EAAY,UAAEhB,EAAS,YAAEO,EAAW,SAAEX,EAAQ,SAAEC,GAAaX,EAElN+B,EAAiBzD,GACjB8B,GACK4B,EAAAA,EAAAA,YAAW1D,GAAS,CAACA,GAAS,GAE9B2D,MAAMC,QAAQ5D,GAASA,EAAQ,IAInCA,EAAOE,IAAY2D,EAAAA,EAAAA,GACxBtD,OAAOC,OACL,CAAC,EACDkB,EACA,CACEoC,SAAU9D,IACR0B,EAAMoC,UAAYpC,EAAMoC,SAASpC,EAAMI,OAASiC,IAAK/D,GAASA,KAGlE,UAAW0B,EAAQ,CAAE1B,MAAOyD,EAAe/B,EAAM1B,QAAW,CAAEgE,aAAcP,EAAe/B,EAAMsC,kBAI9FC,EAAaC,IAAkB/D,EAAAA,EAAAA,UAAS,CAAC,IACzCJ,EAAMoE,IAAWN,EAAAA,EAAAA,GAAgBnC,EAAO,CAC7CsC,aAAc,cACdhE,MAAO,OACP8D,SAAU,kBAELM,GAAOC,KAAYlE,EAAAA,EAAAA,WAAS,IAC5BmE,GAAYC,KAAiBpE,EAAAA,EAAAA,UAAS,GAEvCqE,IAAWC,EAAAA,EAAAA,GAAUC,IACzBH,GAAcG,EAAGC,eAGbC,IArISC,GAqIsBC,KAAKC,IAAIT,GAjI/BtE,KACjB,IAAKA,EAAO,OAAO,EACnB,GAAIgF,OAAOC,UAAUjF,GACnB,OAAOA,EAET,MAAMkF,EAAQlF,EAAMmF,WAAWD,MAAM,gBACrC,OAAOA,EAAQF,OAAOE,EAAM,IAAM,GA2H0BE,CAAW5B,IApIjD,kBAARqB,GAAmB,GAAHQ,OAAMR,GAAG,MAAOA,IAD7BA,OAuIf,MAAM,QAAES,IAAYC,EAAAA,IAAIC,SAElBC,GAAiBA,CAACzF,EAAO4B,MACzBoD,OAAOC,UAAUrD,IAAcA,EAAY,GAAK5B,EAAM0F,QAAU9D,KAClE0D,GAAQK,MAAMlE,EAAc,CAAEE,GAAI,kBAAoB,CAAEC,gBACjD,GAKLf,GAAWA,CAACF,EAAMiF,MACrBA,GAAmB1F,GAAUF,IAC5B,MAAM6F,EAAW7F,EAAM8F,MAAM,GACvBC,EAAQ/F,EAAMgG,UAAUC,GAAeA,EAAY5D,KAAc1B,EAAK0B,IAI5E,OAHI0D,GAAS,GACXF,EAASK,OAAOH,EAAO,GAElBF,KAkCLvF,GAAe,CACnBoB,QACA1B,MAAOA,EACPE,WACA+D,cACAC,iBACAE,SACAE,cACA5D,MAtCYA,CAACC,EAAMiF,MAClBA,GAAmB1F,GAAUF,IAC5B,GAAIyF,GAAezF,EAAO4B,GACxB,OAAO5B,EAET,MAAM6F,EAAW7F,EAAM8F,MAAM,GAK7B,OAHe,IADD9F,EAAMgG,UAAUC,GAAeA,EAAY5D,KAAc1B,EAAK0B,KAE1EwD,EAASM,KAAKxF,GAETkF,KA6BThF,YACAD,SA1BeA,CAACD,EAAMiF,MACrBA,GAAmB1F,GAAUF,IAC5B,MAAM6F,GAAY7F,GAAS,IAAI8F,MAAM,GAC/BC,EAAQF,EAASG,UAAUC,GAAeA,EAAY5D,KAAc1B,EAAK0B,IAC/E,OAAe,IAAX0D,GAAiBN,GAAeI,EAAUjE,KAG/B,IAAXmE,EACFF,EAASM,KAAKxF,GAEdkF,EAASK,OAAOH,EAAO,GAElBF,GAPE7F,KAsBXD,MAAOgC,GAAYhC,EACnBiD,aAAcmB,EACdxE,YAGIyG,GAAmB,WAAgB,IAAf1E,EAAK2E,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjC,MAA8C,oBAAnC/F,GAAaoB,MAAM6E,YACrBjG,GAAaoB,MAAM6E,YAAY7E,EAAOpB,IAG7CQ,IAAAA,cAAC0F,EAAAA,KAAIC,EAAA,GACC/E,EAAK,CACTJ,IAAKkD,GACLlB,UAAWoD,IAAWpD,EAAWqD,EAAuB,eAAgB,CACtE,CAACA,GAAgBlE,EACjB,CAACkE,GAAoB5E,IAEvB6E,QAAQ,gBACRC,YAAaA,KACXxC,IAAS,IAEXyC,WAAYA,KACVzC,IAAS,MAGV,MACC,MAAM0C,EAA4B,oBAAXnE,EAAwBA,EAAOtC,IAAgBsC,EACtE,OACEmE,GACEjG,IAAAA,cAAA,QACEwC,UAAWoD,IAAWC,EAA8B,uBACpDK,QAASC,IACPA,EAAEC,oBAGHH,EAIR,EAdA,GAeDjG,IAAAA,cAAA,OAAKwC,UAAWoD,IAAWC,EAA6B,uBACrD3G,EAAM0F,OAAS,EACd5D,GAAU9B,EAAM,GAAGqC,KAAcC,EAAiBD,GAChDrC,EAAM,GAAGoC,GAETpC,EAAMmH,IAAIxG,GAENG,IAAAA,cAACsG,EAAAA,IAAG,CACFC,IAAK1G,EAAK0B,GACViF,UAAQ,EACRC,UAAU,EACVC,QAASP,IACPA,EAAEQ,iBACF5G,GAASF,KAGVA,EAAKyB,KAMdtB,IAAAA,cAAA,QAAMwC,UAAWoD,IAAWC,EAAsB,6BAA8BzH,IAGpF4B,IAAAA,cAAA,OAAKwC,UAAWoD,IAAWC,EAA4B,uBACnD5E,GAAYY,GAAcyB,IAASpE,EAAM0F,OAAS,EAClD5E,IAAAA,cAAC4G,EAAAA,EAAiB,CAChBV,QAASC,IACPA,EAAEC,kBACFhH,EAAS,OAIbY,IAAAA,cAAC6G,EAAAA,EAAY,OAGhB,MACC,MAAMZ,EAA4B,oBAAXlE,EAAwBA,EAAOvC,IAAgBuC,EACtE,OACEkE,GACEjG,IAAAA,cAAA,QACEwC,UAAWoD,IAAWC,EAA8B,uBACpDK,QAASC,IACPA,EAAEC,oBAGHH,EAIR,EAdA,G,EAuBP,OAJAa,EAAAA,EAAAA,qBAAoBtG,EAAK,IAChBhB,IAIPQ,IAAAA,cAAC/B,EAAQ,CAACiB,MAAOM,IACd0B,EACClB,IAAAA,cAAC+G,EAAAA,SAAQ,CACP9H,MAAOgC,GAAYhC,EACnBiD,aAAcmB,EACd3B,UAAWA,EACXsF,OAAO,EACPvE,iBAAkBmD,IAAWC,EAAkBpD,GAC/CwE,QAAQ,QACRC,YAAaA,IACXlH,IAAAA,cAAA,OACEmH,MAAO,CAAE,kBAAmBrD,IAC5BtB,UAAWoD,IAAWC,EAA0B,gBAChDK,QAASC,IACPA,EAAEC,oBAGHvH,EAASW,MAIdQ,IAAAA,cAAA,YAAOsF,OAGTtF,IAAAA,cAAAA,IAAAA,SAAA,KACGsF,GAAiB,CAChBY,QAASA,KACP7C,GAAQ,MAGZrD,IAAAA,cAACrB,EAAiBa,GAAeyC,Q,eE9UvC,MAAAmF,GAAclH,EAAAA,EAAAA,wBAClB,QACA/B,EACA,eAHkB+B,CAIlB,KACA,MAAM,cAAES,IAAkBD,EAAAA,EAAAA,YACpB,MAAEE,EAAK,MAAE1B,EAAK,SAAEE,GAAalB,KAC7B,KAAEmJ,EAAI,iBAAE7F,EAAgB,SAAED,GAAa9B,OAAOC,OAClD,CAAC,EACD,CACE2H,KAAMC,GAAU3G,EAAc,CAAEE,GAAI,YAAc,CAAEyG,YAEtD1G,GAEI2G,EAAgBC,EAAoBtI,EAAOsC,EAAkBD,GACnE,OACEvB,IAAAA,cAAC0F,EAAAA,KAAI,CAACI,QAAQ,gBAAgBtD,UAAWoD,IAAW6B,EAAuB,iBACzEzH,IAAAA,cAAC0F,EAAAA,KAAI,CAACgC,IAAK,GACT1H,IAAAA,cAAA,YAAOW,EAAc,CAAEE,GAAI,aAAc,KACzCb,IAAAA,cAAA,YAAOuH,EAAgB/F,EAAiBC,MAAwB,oBAAT4F,EAAsBA,EAAKnI,EAAM0F,QAAU1F,EAAM0F,SAE1G5E,IAAAA,cAAA,YACEA,IAAAA,cAAC2H,EAAAA,SAAQ,CACPC,QAASL,EACTvE,SAAUmD,IACR,MAAMyB,EAAUzB,EAAE0B,OAAOD,QAIvBxI,EAHGwI,EAGM,CAACpG,GAFD,MAMZb,EAAc,CAAEE,GAAI,mBAOlB2G,EAAsB,SAACtI,EAAOsC,GAAyC,IAAvBD,EAAQgE,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,QACtE,OAAyB,KAAlB,MAAArG,OAAA,EAAAA,EAAO0F,SAAgBkD,IAAI5I,EAAO,OAAFqF,OAAShD,EAAQ,QAASC,EAAiBD,EACpF,E,2ECxCM,MAAAwG,IAAkB7H,EAAAA,EAAAA,wBAAuB,QAAS/B,EAAM,eAAtC+B,CAAsD,KAC5E,MAAM,cAAES,IAAkBD,EAAAA,EAAAA,YACpB,MAAEE,EAAK,MAAE1B,EAAK,SAAEa,GAAa7B,KAC7B,OAAE8C,EAAM,UAAEF,EAAS,SAAEQ,EAAQ,SAAEC,GAAa9B,OAAOC,OAAO,CAAC,EAAGkB,GAEpE,OACEZ,IAAAA,cAAC0F,EAAAA,KAAI,CAAClD,UAAWoD,IAAWoC,GAAmB,qBAAsBN,IAAK,GACxE1H,IAAAA,cAAA,OAAKwC,UAAWwF,GACbrH,EAAc,CAAEE,GAAI,cACnBG,GAAU9B,EAAM0F,OAAS,GAAK,IAAJL,OAAQrF,EAAM0F,QAAML,OAAGL,OAAOC,UAAUrD,GAAa,IAAHyD,OAAOzD,GAAc,GAAE,KAAI,KAE3Gd,IAAAA,cAACiI,EAAAA,EAAS,CAACzF,UAAWwF,IACpBhI,IAAAA,cAAC0F,EAAAA,KAAI,CAACgC,IAAK,EAAGQ,MAAI,EAAC1F,UAAWwF,IAC3B9I,EAAMmH,IAAIxG,GAEPG,IAAAA,cAACsG,EAAAA,IAAG,CACF9D,UAAWwF,GACXzB,IAAK1G,EAAK0B,GACViF,UAAQ,EACRC,UAAU,EACVC,QAASP,IACPA,EAAEQ,iBACF5G,EAASF,KAGXG,IAAAA,cAAA,QAAMwC,UAAWwF,IAAqBnI,EAAKyB,W,sLCxBrD6G,IAAa7H,EAAAA,EAAAA,YAAW,CAAA1B,EAAqB4B,KAAQ,IAA5B,SAAE3B,GAAgBD,EAAH2B,EAACxB,EAAAH,EAAAwJ,IAC7C,MAAMC,GAAeC,EAAAA,EAAAA,QAAO,MACtB1H,EAAQnB,OAAOC,OACnB,CAAC,EACD,CACE6I,kBAAmBC,IAAqB,IAApB,KAAE3I,EAAI,MAAEe,GAAO4H,EACjC,MAAM,SAAElH,GAAaV,EACrB,OACEZ,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAAA,OAAKwC,UAAW,0BAA2B3C,EAAKyB,IAC/CzB,EAAK4I,aAAezI,IAAAA,cAAA,OAAKwC,UAAWoD,IAAW8C,GAAuC,iCAAkC7I,EAAK4I,eAIpIE,WAAYnJ,IACV,MAAM,KAAEK,EAAI,MAAEe,EAAK,cAAE2G,EAAa,MAAErI,EAAK,SAAEY,EAAQ,SAAEV,EAAQ,aAAE8C,GAAiB1C,GAC1E,OAAEwB,EAAM,QAAEE,EAAO,kBAAEqH,EAAiB,SAAEhH,GAAaX,EACnDgI,EAAY1J,EAAM2J,KAAKhB,GAAUA,EAAOtG,KAAc1B,EAAK0B,IACjE,OACEvB,IAAAA,cAAC8I,EAAAA,KAAKC,KAAI,CACRvG,UAAWoD,IAAW8C,GAA4B,mBAAoB,CACpE,CAACA,IAAuBE,EACxB,CAACF,IAAuB7I,EAAKoB,WAE/BsF,IAAK1G,EAAK0B,GACV2E,QAASA,KACHrG,EAAKoB,UAGLsG,IAGAvG,EACF5B,EAAS,CAACS,IAEVC,EAASD,GAEPqB,GAAWF,GACbkB,GAAa,OAIflB,GACAhB,IAAAA,cAAC0F,EAAAA,KACC,KAAA1F,IAAAA,cAAC2H,EAAAA,SAAQ,CAACC,QAASL,GAAiBqB,EAAW3H,SAAUsG,GAAiB1H,EAAKoB,YAGnFjB,IAAAA,cAAC0F,EAAAA,KAAI,CAACsD,UAAQ,EAACC,IAAK,EAAGC,KAAM,EAAG1G,UAAW,4BACxC+F,EAAkB/I,IAEpBwB,GAAUhB,IAAAA,cAAA,OAAKwC,UAAWkG,IAA0BE,GAAa5I,IAAAA,cAACmJ,EAAAA,EAAa,SAItFC,WAAY5J,IACV,MAAM,MAAEoB,EAAK,cAAE2G,EAAa,KAAE8B,GAAS7J,GACjC,WAAEmJ,GAAe/H,EACvB,OAAMyI,GAAQA,EAAKzE,OAAS,EAI1B5E,IAAAA,cAAC8I,EAAAA,KAAI,CACHtG,UAAWoD,IAAW8C,GAAuB,CAC3C,CAACA,IAA2BnB,IAE9B+B,KAAK,QACLC,WAAYF,EACZV,WAAY9I,GAAQ8I,EAAWlJ,OAAOC,OAAO,CAAC,EAAGF,EAAc,CAAEK,YAT5De,EAAM4I,OAASxJ,IAAAA,cAACyJ,EAAAA,MAAK,CAACjH,UAAWkG,OAc9CnI,GAEF,OACEP,IAAAA,cAACC,EAAW0F,EAAA,GAAK/E,EAAK,CAAEJ,IAAKA,IAC1BkJ,IACC,MAAM,MAAE9I,EAAK,MAAE1B,EAAK,YAAEiE,EAAW,eAAEC,EAAc,aAAElB,GAAiBwH,GAC9D,OAAEC,EAAM,QAAEzI,EAAO,eAAE0I,EAAc,kBAAEC,EAAiB,kBAAE1I,EAAiB,SAAEI,EAAQ,OAAEP,EAAM,iBAAEK,EAAgB,gBAAEO,EAAe,IAAEkI,EAAG,QAAEC,EAAO,WAAEX,EAAU,iBAAE5H,GAAqBZ,EAC7KoJ,EAAa,CACjBzL,QAAUuL,GAAiC,oBAAnBF,GAAmCG,GAAwC,oBAAtBF,IAC3E7J,IAAAA,cAACiK,EAAAA,EAAW,CACVzH,UAAWoD,IAAW8C,GAAwB,qBAAsB,CAClE,WAAYxH,IAEd9C,YAAa+C,EACbjC,MAAOiE,EAAY+G,WACnBC,SAAUjL,IACRkE,EAAeD,GAAe1D,OAAOC,OAAO,CAAC,EAAGyD,EAAa,CAAE+G,WAAYhL,MAE7EkL,OAAQlJ,EACRmJ,kBAAmBnJ,IAGvBoJ,YACEtK,IAAAA,cAAA,OACEwC,UAAWoD,IAAW8C,GAAuB,2BAA4B,CACvE,WAAYxH,MAGZF,GAAUK,GAAoBrB,IAAAA,cAACoH,EAAa,OAGlDmD,UACEvK,IAAAA,cAACwK,EAAAA,EAAiB7E,EAAA,GACZ/E,EAAK,CACT4B,UAAWoD,IAAW8C,GAAe,0BAA2B,CAC9D,WAAYxH,IAEdiC,YAAaA,EACbyG,eAAgBA,EAChBE,IAAKrK,OAAOC,OACV,CAAC,EACDqK,EACI,CACEU,KAAM,CAAEV,UAAS5G,eACjBuH,OAAQC,IAAc,IAAb,KAAEF,GAAME,EACf,MAAM,QAAEZ,EAAO,YAAE5G,GAAgBsH,EACjC,GAAiC,oBAAtBZ,EAAkC,CAE3C,MAAO,CACLe,SAFiBb,EAAQc,OAAOhL,GAAQgK,EAAkB1G,EAAatD,IAI3E,CACA,MAAO,CACL+K,SAAUb,KAIhBD,GAENtJ,IAAK6H,IAEJyC,IACC,MAAMvD,EAAgBC,EAAoBtI,EAAOsC,EAAkBD,GACnE,OAAO6H,EAAW3J,OAAOC,OAAO,CAAC,EAAGoL,EAAYpB,EAAa,CAAEnC,qBAIrEwD,YAAanJ,GACX5B,IAAAA,cAAA,OACEwC,UAAWoD,IAAW8C,GAAuB,2BAA4B,CACvE,WAAYxH,KAGdlB,IAAAA,cAAC+H,GAAe,OAGpB4B,OAAQA,GACN3J,IAAAA,cAAA,OAAKwC,UAAWoD,IAAW8C,GAAiB,uBACvB,oBAAXiB,EACJA,EAAO,CACLqB,OAAQA,KACN3C,EAAapC,SAAWoC,EAAapC,QAAQ+E,UAE/CC,MAAOA,KACL/I,GAAa,MAGjByH,IAIV,MAAwB,oBAAb9K,EACFA,EAASY,OAAOC,OAAO,CAAC,EAAGgK,EAAa,CAAEM,gBAGjDhK,IAAAA,cAAC0F,EAAAA,KAAI,CAACsD,UAAQ,GACXgB,EAAWzL,OACXyL,EAAWM,YACXN,EAAWO,UACXP,EAAWL,OACXK,EAAWe,iB,oPCxKxB,MAAMG,IAAkBhL,EAAAA,EAAAA,wBACtB,QACA/B,EACA,eAHsB+B,EAKtBI,EAAAA,EAAAA,YAAW,CAACC,EAAGC,KACb,MAAM,cAAEG,IAAkBD,EAAAA,EAAAA,YACnByK,EAAeC,IAAoB/L,EAAAA,EAAAA,UAAS,IAC7CgJ,GAAeC,EAAAA,EAAAA,UACf1H,EAAQnB,OAAOC,OACnB,CAAC,EACD,CACEgD,aAAc,QACd2I,aAAc7L,IACZ,MAAM,MAAEoB,EAAK,YAAEuC,EAAW,eAAEC,GAAmB5D,GACzC,QAAE0B,EAAO,kBAAEC,EAAiB,IAAE2I,EAAG,eAAEF,EAAc,QAAEG,EAAO,kBAAEF,EAAiB,SAAEvI,GAAaV,EAClG,OAAOkJ,GAAiC,oBAAnBF,GAAmCG,GAAwC,oBAAtBF,EAIxE7J,IAAAA,cAACiK,EAAAA,EAAW,CACVzH,UAAWoD,IAAW0F,GAAwB,qBAAsB,CAClE,WAAYpK,IAEd9C,YAAa+C,EACbjC,MAAOiE,EAAY+G,YAAc,GACjCC,SAAUjL,IACRkE,EAAeD,GAAe1D,OAAOC,OAAO,CAAC,EAAGyD,EAAa,CAAE+G,WAAYhL,MAE7EkL,OAAQlJ,EACRmJ,kBAAmBnJ,IAbd,MAiBXqK,qBAAsBA,CAACJ,EAAetL,EAAML,KAC1C,MAAM,MAAEoB,GAAUpB,GACZ,SAAE8B,GAAaV,EACrB,OAAKuK,GAGEtL,EAAKyB,GAAUkK,QAAQL,IAAkB,IAGpD5K,GAGIkL,GAAUnD,EAAAA,EAAAA,QAAO,MAEvB,OACEtI,IAAAA,cAACC,EAAW0F,EAAA,GAAK/E,EAAK,CAAEJ,IAAKA,IAC1BkJ,IACC,MAAM,MAAE9I,EAAK,MAAE1B,EAAK,SAAEE,EAAQ,SAAEU,EAAQ,SAAEC,EAAQ,aAAEmC,GAAiBwH,GAC/D,OAAEC,EAAM,aAAE0B,EAAY,QAAEK,EAAO,QAAE3B,EAAO,kBAAEF,EAAiB,qBAAE0B,EAAoB,IAAEzB,EAAG,iBAAEtI,EAAgB,QAAEN,EAAO,OAAEF,EAAM,UAAEF,EAAS,eAAE8I,EAAc,kBAAEzI,EAAiB,iBAAEE,EAAgB,SAAEC,EAAQ,SAAEC,EAAQ,YAAE4B,GACnNvC,EACI2G,EAAgBC,EAAoBtI,EAAOsC,EAAkBD,GAE7DoK,EAAWhC,GACf3J,IAAAA,cAAA,OAAKwC,UAAWoD,IAAW0F,GAAiB,wBACvB,oBAAX3B,EACJA,EAAO,CACLqB,OAAQA,KACN3C,EAAapC,SAAWoC,EAAapC,QAAQ+E,UAE/CC,MAAOA,KACL/I,GAAa,MAGjByH,GAGR,OACE3J,IAAAA,cAAC4L,EAAAA,IAAG,CAAC1D,MAAM,EAAO1H,IAAKiL,GACrBzL,IAAAA,cAAC6L,EAAAA,IAAG,CACFrJ,UAAWoD,IAAW,CACpB,CAAC0F,IAAuBtK,IAE1B8K,KAAM9K,EAAS,GAAK,IAEpBhB,IAAAA,cAAA,WAAMqL,EAAa5L,OAAOC,OAAO,CAAC,EAAGgK,KACrC1J,IAAAA,cAAC4L,EAAAA,IAAG,CAAC1D,MAAM,EAAO1F,UAAWoD,IAAW0F,GAAiB,8BACrDtK,GACAhB,IAAAA,cAAC6L,EAAAA,IAAG,CAACrJ,UAAWoD,IAAW0F,GAAc,0BACtCjK,EACCrB,IAAAA,cAAC2H,EAAAA,SAAQ,CACPC,QAASL,EACTvE,SAAUmD,IACR,MAAMyB,EAAUzB,EAAE0B,OAAOD,QAIvBxI,EAHGwI,EAGM,CAACpG,GAFD,OAOfxB,IAAAA,cAAC2H,EAAAA,SAAQ,CAACR,MAAO,CAAE4E,WAAY,aAIrC/L,IAAAA,cAAC6L,EAAAA,IAAG,CAAC3C,KAAM,GACTlJ,IAAAA,cAAC4L,EAAAA,IAAG,CAAC1D,MAAM,GACRwD,EAAQrF,IAAI2F,IACX,MAAM,KAAEC,EAAI,MAAE5J,EAAK,KAAEyJ,GAASE,EAC9B,OACEhM,IAAAA,cAAC6L,EAAAA,IAAG,CAACtF,IAAK0F,EAAMH,KAAMA,EAAMtJ,UAAWoD,IAAW0F,GAAc,0BAC7DjJ,QAObrC,IAAAA,cAACwK,EAAAA,EAAiB7E,EAAA,GACZ/E,EAAK,CACT4B,UAAWoD,IAAW0F,GAAe,gCAAiC,CACpE,WAAYpK,IAEdiC,YAAaA,EACbyG,eAAgBA,EAChBE,IAAKrK,OAAOC,OACV,CAAC,EACDqK,EACI,CACEU,KAAM,CAAEV,UAAS5G,eACjBuH,OAAQwB,IAAc,IAAb,KAAEzB,GAAMyB,EACf,MAAM,QAAEnC,EAAO,YAAE5G,GAAgBsH,EACjC,GAAiC,oBAAtBZ,EAAkC,CAE3C,MAAO,CACLe,SAFiBb,EAAQc,OAAOhL,GAAQgK,EAAkB1G,EAAatD,EAAM6J,IAIjF,CACA,MAAO,CACLkB,SAAUb,KAIhBD,GAENtJ,IAAK6H,IAEJyC,IACC,MAAM,KAAEzB,GAASyB,EACXtL,EAAeC,OAAOC,OAAO,CAAC,EAAGoL,EAAYpB,EAAa,CAAEnC,kBAClE,OAAM8B,GAAQA,EAAKzE,OAAS,EAGrByE,EAAKhD,IAAIxG,IACd,MAAM+I,EAAY1J,EAAM2J,KAAKhB,GAAUA,EAAOtG,KAAc1B,EAAK0B,IACjE,OACEvB,IAAAA,cAAC4L,EAAAA,IAAG,CACF1D,MAAM,EACN3B,IAAK1G,EAAK0B,GACViB,UAAWoD,IAAW0F,GAAe,yBAA0B,CAC7D,CACE,CAACA,IAA2B/D,EAC5B,CAAC+D,IAAuB1C,EACxB,CAAC0C,IAAuBzL,EAAKoB,YAGjCiF,QAASA,KACHrG,EAAKoB,UAGLsG,IAGAvG,EACF5B,EAAS,CAACS,IAEVC,EAASD,GAEPqB,GAAWF,GACbkB,GAAa,OAIflB,GACAhB,IAAAA,cAAC6L,EAAAA,IAAG,CAACrJ,UAAWoD,IAAW0F,GAAc,0BACvCtL,IAAAA,cAAC2H,EAAAA,SAAQ,CAAC1G,SAAUpB,EAAKoB,UAAYsG,EAAeK,QAASL,GAAiBqB,KAGlF5I,IAAAA,cAAC6L,EAAAA,IAAG,CAAC3C,KAAM,GACTlJ,IAAAA,cAAC4L,EAAAA,IAAG,CAAC1D,MAAM,GACRwD,EAAQrF,IAAI2F,IACX,MAAM,KAAEC,EAAI,KAAEH,EAAI,WAAEK,GAAeH,EACnC,OACEhM,IAAAA,cAAC6L,EAAAA,IAAG,CAACtF,IAAK0F,EAAMH,KAAMA,EAAMtJ,UAAWoD,IAAW0F,GAAc,0BACvC,oBAAfa,EAA4BA,EAAWtM,EAAML,GAAgBsI,IAAIjI,EAAMoM,QAMxFjL,GAAUhB,IAAAA,cAAC6L,EAAAA,IAAG,CAACrJ,UAAWoD,IAAW0F,GAAcA,GAAyB,0BAA2B1C,GAAa5I,IAAAA,cAACmJ,EAAAA,EAAa,UAjDhIvI,EAAM4I,OAASxJ,IAAAA,cAACyJ,EAAAA,MAAK,CAACjH,UAAWoD,IAAW0F,GAAgBA,GAAe,8BAuDtFtK,GAAU2K,GAAa3L,IAAAA,cAAA,OAAKwC,UAAWoD,IAAW0F,GAAiB,2BAErEtK,GACAhB,IAAAA,cAAC6L,EAAAA,IAAG,CACFrJ,UAAWoD,IAAW0F,GAAwB,CAC5C,WAAYpK,IAEd4K,KAAM,GAEN9L,IAAAA,cAACiK,EAAAA,EAAW,CACVzH,UAAW8I,GACXlN,YAAa+C,EACbjC,MAAOiM,EACPhB,SAAUjL,IACRkM,EAAiBlM,IAEnBmL,kBAAkB,IAEpBrK,IAAAA,cAAC4L,EAAAA,IAAG,CAAC1D,MAAM,EAAOpC,QAAS,gBAAiBsG,MAAO,UACjDpM,IAAAA,cAAC6L,EAAAA,IAAG,KACDlL,EAAc,CAAEE,GAAI,aACpB3B,EAAM0F,OAAS,GAAK,IAAJL,OAAQrF,EAAM0F,QAAML,OAAGL,OAAOC,UAAUrD,GAAa,IAAHyD,OAAOzD,GAAc,GAAE,KAAI,KAEhGd,IAAAA,cAAC6L,EAAAA,IAAG,KACF7L,IAAAA,cAACqM,EAAAA,OAAM,CACL7J,UAAW8I,GACXgB,KAAK,OACLpG,QAASA,KACP9G,EAAS,MAEZ,8BAKLY,IAAAA,cAACiI,EAAAA,EACC,KAAAjI,IAAAA,cAAC0F,EAAAA,KAAI,CAACwC,MAAI,EAACR,IAAK,GACbxI,EACE2L,OAAOhL,GAAQ0L,EAAqBJ,EAAetL,EAAM6J,IACzDrD,IAAIxG,GAEDG,IAAAA,cAACsG,EAAAA,IAAG,CACF9D,UAAW8I,GACX/E,IAAK1G,EAAK0B,GACViF,UAAQ,EACRC,UAAU,EACVC,QAASP,IACPA,EAAEQ,iBACF5G,EAASF,KAGXG,IAAAA,cAACuM,EAAAA,QAAO,CACNC,kBAAmBA,IAAMf,EAAQxF,QACjCwG,QACEzM,IAAAA,cAAC4L,EAAAA,IAAG,CAACpJ,UAAW8I,IACbI,EAAQrF,IAAIqG,IAAiC,IAAhC,KAAET,EAAI,MAAE5J,EAAK,WAAE8J,GAAYO,EACvC,OACE1M,IAAAA,cAAC2M,EAAAA,SAAQ,CAACpG,IAAK0F,GACbjM,IAAAA,cAAC6L,EAAAA,IAAG,CAACC,KAAM,EAAGtJ,UAAW8I,IACtBjJ,GAEHrC,IAAAA,cAAC6L,EAAAA,IAAG,CAACrJ,UAAW8I,GAAmCQ,KAAM,IAChC,oBAAfK,EAA4BA,EAAWtM,EAAM6J,GAAe5B,IAAIjI,EAAMoM,SAQ1FjM,IAAAA,cAAA,QAAMwC,UAAW8I,IAAqBzL,EAAKyB,SAOxDqK,S,8JCvRbiB,GAAgBC,IAAQ,WAAqD,IAApDpC,EAAIlF,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAI,UAAEuH,EAAS,SAAEvL,EAAQ,YAAEwL,GAAaxH,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EAC5E,MAAMwH,EAAYC,GACTA,EAAO5G,IAAI6G,IAChB,MAAMrO,EAAW4L,EAAKI,OAAOhL,IACnBsN,IAAMD,EAAK3L,KAAc1B,EAAKiN,KAAeI,EAAK3L,IAE5D,OAAO9B,OAAOC,OAAO,CAAC,EAAGwN,EAAM,CAAE,CAACH,GAAcC,EAAUnO,OAI9D,MAAO,CACLuO,SAAUJ,EAAUvC,EAAKI,OAAOhL,IAASA,EAAKiN,KAC9CO,IAAK5C,EAAKpE,IAAIxG,GAAQA,EAAKgB,IAE/B,GAEMyM,IAAahN,EAAAA,EAAAA,YAAW,CAAA1B,EAAqB4B,KAAQ,IAA5B,SAAE3B,GAAgBD,EAAH2B,EAACxB,EAAAH,EAAA2O,IAC7C,MAAMlF,GAAeC,EAAAA,EAAAA,QAAO,OACrBkF,EAAcC,IAAmBpO,EAAAA,EAAAA,UAAS,IAC3CuB,EAAQnB,OAAOC,OACnB,CAAC,EACD,CACEoN,UAAW,WACXC,YAAa,WACbxE,kBAAmBmF,IAAqB,IAApB,KAAE7N,EAAI,MAAEe,GAAO8M,EACjC,MAAM,SAAEpM,GAAaV,EACrB,OACEZ,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAAA,OAAKwC,UAAW,0BAA2B3C,EAAKyB,MAItDqH,WAAYnJ,IACV,MAAM,KAAEK,EAAI,MAAEe,EAAK,cAAE2G,EAAa,MAAErI,EAAK,SAAEY,EAAQ,SAAEV,EAAQ,aAAE8C,GAAiB1C,GAC1E,OAAEwB,EAAM,QAAEE,EAAO,kBAAEqH,EAAiB,SAAEhH,GAAaX,EACnDgI,EAAY1J,EAAM2J,KAAKhB,GAAUA,EAAOtG,KAAc1B,EAAK0B,IACjE,OACEvB,IAAAA,cAAC0F,EAAAA,KAAI,CACHlD,UAAWoD,IAAWuB,GAA4B,mBAAoB,CACpE,CAACA,IAAuByB,EACxB,CAACzB,IAAuBtH,EAAKoB,WAE/BsF,IAAK1G,EAAK0B,GACV2E,QAASA,KACHrG,EAAKoB,UAGLsG,IAGAvG,EACF5B,EAAS,CAACS,IAEVC,EAASD,GAEPqB,GAAWF,GACbkB,GAAa,OAIflB,GACAhB,IAAAA,cAAC0F,EAAAA,KACC,KAAA1F,IAAAA,cAAC2H,EAAAA,SAAQ,CAACC,QAASL,GAAiBqB,EAAW3H,SAAUsG,GAAiB1H,EAAKoB,YAGnFjB,IAAAA,cAAC0F,EAAAA,KAAI,CAACsD,UAAQ,EAACC,IAAK,EAAGC,KAAM,EAAG1G,UAAW,4BACxC+F,EAAkB/I,IAEpBwB,GAAUhB,IAAAA,cAAA,OAAKwC,UAAW2E,IAA0ByB,GAAa5I,IAAAA,cAACmJ,EAAAA,EAAa,SAItFwE,WAAYnO,IACV,MAAM,MAAEoB,EAAK,cAAE2G,EAAa,KAAEkD,GAASjL,GACjC,WAAEmJ,EAAU,SAAEpH,EAAQ,SAAED,EAAQ,YAAEyL,EAAW,UAAED,GAAclM,GAC7D,SAAEwM,EAAQ,IAAEC,GAAQT,GAAcnC,EAAM,CAAElJ,WAAUuL,YAAWC,gBACrE,OAAMK,GAAYA,EAASxI,OAAS,EAIlC5E,IAAAA,cAAC4N,EAAAA,KAAI,CACHpL,UAAWoD,IAAWuB,GAAuB,CAC3C,CAACA,IAA2BI,IAE9BsG,UAAQ,EACRC,YAAY,EACZN,aAAcA,EACdO,WAAY,CAAE1L,MAAOf,EAAUiF,IAAKhF,EAAU1C,SAAUkO,GACxDK,SAAUA,EACVY,SAAUR,IACRC,EAAgBD,IAElBS,YAAaf,GACJvE,EAAWlJ,OAAOC,OAAO,CAAC,EAAGF,EAAc,CAAEK,KAAMqN,OAhBvDtM,EAAM4I,OAASxJ,IAAAA,cAACyJ,EAAAA,MAAK,QAsBlClJ,GAEF,OACEP,IAAAA,cAACC,EAAW0F,EAAA,GAAK/E,EAAK,CAAEJ,IAAKA,IAC1BkJ,IACC,MAAM,MAAE9I,EAAK,MAAE1B,EAAK,aAAEgD,GAAiBwH,GACjC,OAAEC,EAAM,QAAEzI,EAAO,SAAEK,EAAQ,OAAEP,EAAM,iBAAEK,EAAgB,gBAAEO,EAAe,IAAEkI,EAAG,QAAEC,EAAO,WAAE4D,EAAU,iBAAEnM,GAAqBZ,EACvHoJ,EAAa,CACjBM,YACEtK,IAAAA,cAAA,OACEwC,UAAWoD,IAAWuB,GAAuB,2BAA4B,CACvE,WAAYjG,MAGZF,GAAUK,GAAoBrB,IAAAA,cAACoH,EAAa,OAGlD8G,SACElO,IAAAA,cAACmO,IAAKxI,EACA,GAAAlG,OAAOC,OACT,CAAC,EACDqK,EACI,CACEU,KAAM,CAAEV,WACRW,OAAQ0D,IAAA,IAAC,KAAE3D,GAAM2D,EAAA,OAAK3D,EAAKV,UAE7BD,GACL,CACDtJ,IAAK6H,EACLgG,OAAQC,IAA6B,IAA5B,KAAE7D,GAAqB6D,EAAZxD,EAAU/L,EAAAuP,EAAAC,IAC5B,MAAMhH,EAAgBC,EAAoBtI,EAAOsC,EAAkBD,GACnE,OACEvB,IAAAA,cAACiI,EAAAA,EAAS,CACRzF,UAAWoD,IAAWuB,GAAe,0BAA2B,CAC9D,WAAYjG,KAGbyM,EAAWlO,OAAOC,OAAO,CAAC,EAAGoL,EAAYpB,EAAa,CAAEnC,gBAAekD,eAMlFM,YAAanJ,GACX5B,IAAAA,cAAA,OACEwC,UAAWoD,IAAWuB,GAAuB,2BAA4B,CACvE,WAAYjG,KAGdlB,IAAAA,cAAC+H,GAAe,OAGpB4B,OAAQA,GACN3J,IAAAA,cAAA,OAAKwC,UAAWoD,IAAWuB,GAAiB,uBACvB,oBAAXwC,EACJA,EAAO,CACLqB,OAAQA,KACN3C,EAAapC,SAAWoC,EAAapC,QAAQ+E,UAE/CC,MAAOA,KACL/I,GAAa,MAGjByH,IAIV,MAAwB,oBAAb9K,EACFA,EAASY,OAAOC,OAAO,CAAC,EAAGgK,EAAa,CAAEM,gBAGjDhK,IAAAA,cAAC0F,EAAAA,KAAI,CAACsD,UAAQ,GACXgB,EAAWzL,OACXyL,EAAWM,YACXN,EAAWkE,SACXlE,EAAWL,OACXK,EAAWe,gB","sources":["../../src/SelectInput/context.js","../../src/locale/zh-CN.js","../../src/SelectInput/index.js","../../src/locale/en-US.js","../../src/SelectedAll/index.js","../../src/SelectedTagList/index.js","../../src/SelectList/index.js","../../src/SelectTableList/index.js","../../src/SelectTree/index.js"],"sourcesContent":["import { createContext } from '@kne/global-context';\n\nexport const context = createContext();\n\nexport const { Provider, useContext } = context;\n\nexport default context;\n","const locale = {\n    placeholder: '请选择',\n    selectAll: '全选',\n    selected: '已选',\n    search: '搜索',\n    numberOf: '{number}个',\n    maxLengthError: '最大数量不能超过{maxLength}',\n    defaultChildren: '下拉内容，需要调用方实现'\n};\n\nexport default locale;","import React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Provider } from './context';\nimport useResize from '@kne/use-resize';\nimport useControlValue from '@kne/use-control-value';\nimport classnames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport last from 'lodash/last';\nimport { Tag, Flex, Dropdown, Modal, App } from 'antd';\nimport { DownOutlined, CloseCircleFilled } from '@ant-design/icons';\nimport { isNotEmpty } from '@kne/is-empty';\nimport style from './style.module.scss';\nimport zhCn from '../locale/zh-CN';\nimport enUS from '../locale/en-US';\nimport { createWithIntlProvider, useIntl } from '@kne/react-intl';\n\nconst numberToPx = val => {\n  return typeof val === 'number' ? `${val}px` : val;\n};\n\nconst pxToNumber = value => {\n  if (!value) return 0;\n  if (Number.isInteger(value)) {\n    return value;\n  }\n  const match = value.toString().match(/^\\d*(\\.\\d*)?/);\n  return match ? Number(match[0]) : 0;\n};\n\nconst ModalContent = ({ children, ...others }) => {\n  const { open, value: propsValue } = others;\n  const [value, setValue] = useState(propsValue);\n  useEffect(() => {\n    if (open && !isEqual(value, propsValue)) {\n      setValue(propsValue);\n    }\n  }, [open]);\n  const contextProps = Object.assign({}, others, {\n    value,\n    setValue,\n    onComplete: () => others.setValue(value),\n    onAdd: item => others.onAdd(item, setValue),\n    onSelect: item => others.onSelect(item, setValue),\n    onRemove: item => others.onRemove(item, setValue),\n    children\n  });\n\n  return <Provider value={contextProps}>{children(contextProps)}</Provider>;\n};\n\nconst SelectInput = createWithIntlProvider({\n  defaultLocale: 'zh-CN',\n  namespace: 'super-select',\n  messages: {\n    'zh-CN': zhCn,\n    'en-US': enUS\n  }\n})(\n  forwardRef((p, ref) => {\n    const intl = useIntl();\n    const { formatMessage } = intl;\n    const props = Object.assign(\n      {},\n      {\n        children: () => formatMessage({ id: 'defaultChildren' }),\n        maxLength: null,\n        defaultOpen: false,\n        single: false,\n        disabled: false,\n        isPopup: true,\n        placeholder: formatMessage({ id: 'placeholder' }),\n        searchPlaceholder: formatMessage({ id: 'search' }),\n        completeTips: null,\n        allowSelectedAll: false,\n        labelKey: 'label',\n        valueKey: 'value',\n        selectedAllValue: { value: 'all', label: formatMessage({ id: 'selectAll' }) },\n        placement: 'bottomLeft',\n        labelWrap: false,\n        showSelectedTag: false,\n        allowClear: true,\n        prefix: null,\n        suffix: null,\n        extra: null,\n        renderModal: contextProps => {\n          const { props, open, onComplete, onOpenChange } = contextProps;\n          const { placeholder, children } = props;\n          return (\n            <Modal\n              width={1000}\n              open={open}\n              title={placeholder}\n              onCancel={() => {\n                onOpenChange(false);\n              }}\n              onOk={() => {\n                onComplete();\n                onOpenChange(false);\n              }}\n            >\n              {children(contextProps)}\n            </Modal>\n          );\n        }\n      },\n      p\n    );\n\n    props.selectedAllValue = {\n      [props.valueKey]: props.selectedAllValue.value,\n      [props.labelKey]: props.selectedAllValue.label\n    };\n\n    const { children, prefix, suffix, className, maxLength, overlayClassName, single, labelWrap, isPopup, allowClear, disabled, placeholder, selectedAllValue, overlayWidth, placement, renderModal, labelKey, valueKey } = props;\n\n    const transformValue = value => {\n      if (single) {\n        return isNotEmpty(value) ? [value] : [];\n      } else {\n        return Array.isArray(value) ? value : [];\n      }\n    };\n\n    const [value, setValue] = useControlValue(\n      Object.assign(\n        {},\n        props,\n        {\n          onChange: value => {\n            props.onChange && props.onChange(props.single ? last(value) : value);\n          }\n        },\n        'value' in props ? { value: transformValue(props.value) } : { defaultValue: transformValue(props.defaultValue) }\n      )\n    );\n\n    const [searchProps, setSearchProps] = useState({});\n    const [open, setOpen] = useControlValue(props, {\n      defaultValue: 'defaultOpen',\n      value: 'open',\n      onChange: 'onOpenChange'\n    });\n    const [hover, setHover] = useState(false);\n    const [inputWidth, setInputWidth] = useState(0);\n\n    const inputRef = useResize(el => {\n      setInputWidth(el.clientWidth);\n    });\n\n    const popupOverlayWidth = numberToPx(Math.max(inputWidth, pxToNumber(overlayWidth)));\n\n    const { message } = App.useApp();\n\n    const checkMaxLength = (value, maxLength) => {\n      if (Number.isInteger(maxLength) && maxLength > 0 && value.length >= maxLength) {\n        message.error(formatMessage({ id: 'maxLengthError' }, { maxLength }));\n        return false;\n      }\n      return true;\n    };\n\n    const onRemove = (item, currentSetValue) => {\n      (currentSetValue || setValue)(value => {\n        const newValue = value.slice(0);\n        const index = value.findIndex(currentItem => currentItem[valueKey] === item[valueKey]);\n        if (index > -1) {\n          newValue.splice(index, 1);\n        }\n        return newValue;\n      });\n    };\n\n    const onAdd = (item, currentSetValue) => {\n      (currentSetValue || setValue)(value => {\n        if (checkMaxLength(value, maxLength)) {\n          return value;\n        }\n        const newValue = value.slice(0);\n        const index = value.findIndex(currentItem => currentItem[valueKey] === item[valueKey]);\n        if (index === -1) {\n          newValue.push(item);\n        }\n        return newValue;\n      });\n    };\n\n    const onSelect = (item, currentSetValue) => {\n      (currentSetValue || setValue)(value => {\n        const newValue = (value || []).slice(0);\n        const index = newValue.findIndex(currentItem => currentItem[valueKey] === item[valueKey]);\n        if (index === -1 && !checkMaxLength(newValue, maxLength)) {\n          return value;\n        }\n        if (index === -1) {\n          newValue.push(item);\n        } else {\n          newValue.splice(index, 1);\n        }\n        return newValue;\n      });\n    };\n\n    const contextProps = {\n      props,\n      value: value,\n      setValue,\n      searchProps,\n      setSearchProps,\n      hover,\n      inputWidth,\n      onAdd,\n      onRemove,\n      onSelect,\n      open: !disabled && open,\n      onOpenChange: setOpen,\n      children\n    };\n\n    const inputInnerRender = (props = {}) => {\n      if (typeof contextProps.props.inputRender === 'function') {\n        return contextProps.props.inputRender(props, contextProps);\n      }\n      return (\n        <Flex\n          {...props}\n          ref={inputRef}\n          className={classnames(className, style['select-input'], 'select-input', {\n            [style['wrap']]: labelWrap,\n            [style['disabled']]: disabled\n          })}\n          justify=\"space-between\"\n          onMouseOver={() => {\n            setHover(true);\n          }}\n          onMouseOut={() => {\n            setHover(false);\n          }}\n        >\n          {(() => {\n            const current = typeof prefix === 'function' ? prefix(contextProps) : prefix;\n            return (\n              current && (\n                <span\n                  className={classnames(style['select-input-prefix'], 'select-input-prefix')}\n                  onClick={e => {\n                    e.stopPropagation();\n                  }}\n                >\n                  {current}\n                </span>\n              )\n            );\n          })()}\n          <div className={classnames(style['select-input-inner'], 'select-input-inner')}>\n            {value.length > 0 ? (\n              single || value[0][valueKey] === selectedAllValue[valueKey] ? (\n                value[0][labelKey]\n              ) : (\n                value.map(item => {\n                  return (\n                    <Tag\n                      key={item[valueKey]}\n                      closable\n                      bordered={false}\n                      onClose={e => {\n                        e.preventDefault();\n                        onRemove(item);\n                      }}\n                    >\n                      {item[labelKey]}\n                    </Tag>\n                  );\n                })\n              )\n            ) : (\n              <span className={classnames(style['placeholder'], 'select-input-placeholder')}>{placeholder}</span>\n            )}\n          </div>\n          <div className={classnames(style['select-input-icon'], 'select-input-icon')}>\n            {!disabled && allowClear && hover && value.length > 0 ? (\n              <CloseCircleFilled\n                onClick={e => {\n                  e.stopPropagation();\n                  setValue([]);\n                }}\n              />\n            ) : (\n              <DownOutlined />\n            )}\n          </div>\n          {(() => {\n            const current = typeof suffix === 'function' ? suffix(contextProps) : suffix;\n            return (\n              current && (\n                <span\n                  className={classnames(style['select-input-suffix'], 'select-input-suffix')}\n                  onClick={e => {\n                    e.stopPropagation();\n                  }}\n                >\n                  {current}\n                </span>\n              )\n            );\n          })()}\n        </Flex>\n      );\n    };\n\n    useImperativeHandle(ref, () => {\n      return contextProps;\n    });\n\n    return (\n      <Provider value={contextProps}>\n        {isPopup ? (\n          <Dropdown\n            open={!disabled && open}\n            onOpenChange={setOpen}\n            placement={placement}\n            arrow={false}\n            overlayClassName={classnames(style['overlay'], overlayClassName)}\n            trigger=\"click\"\n            popupRender={() => (\n              <div\n                style={{ '--overlay-width': popupOverlayWidth }}\n                className={classnames(style['overlay-content'], 'over-content')}\n                onClick={e => {\n                  e.stopPropagation();\n                }}\n              >\n                {children(contextProps)}\n              </div>\n            )}\n          >\n            <span>{inputInnerRender()}</span>\n          </Dropdown>\n        ) : (\n          <>\n            {inputInnerRender({\n              onClick: () => {\n                setOpen(true);\n              }\n            })}\n            <ModalContent {...contextProps}>{renderModal}</ModalContent>\n          </>\n        )}\n      </Provider>\n    );\n  })\n);\n\nexport * from './context';\nexport default SelectInput;\n","const locale = {\n    placeholder: 'Please select',\n    selectAll: 'Select All',\n    selected: 'Selected',\n    search: 'Search',\n    numberOf: '{number} items',\n    maxLengthError: 'The maximum number cannot exceed {maxLength}',\n    defaultChildren: 'Dropdown content, to be implemented by the caller'\n};\n\nexport default locale;","import React from 'react';\nimport { Flex, Checkbox } from 'antd';\nimport get from 'lodash/get';\nimport { useContext } from '../SelectInput';\nimport classnames from 'classnames';\nimport style from './style.module.scss';\nimport zhCn from '../locale/zh-CN';\nimport { createWithIntlProvider, useIntl } from '@kne/react-intl';\n\nconst SelectedAll = createWithIntlProvider(\n  'zh-CN',\n  zhCn,\n  'super-select'\n)(() => {\n  const { formatMessage } = useIntl();\n  const { props, value, setValue } = useContext();\n  const { unit, selectedAllValue, valueKey } = Object.assign(\n    {},\n    {\n      unit: number => formatMessage({ id: 'numberOf' }, { number })\n    },\n    props\n  );\n  const isSelectedAll = computedIsSelectAll(value, selectedAllValue, valueKey);\n  return (\n    <Flex justify=\"space-between\" className={classnames(style['selected-all'], 'selected-all')}>\n      <Flex gap={8}>\n        <span>{formatMessage({ id: 'selected' })}:</span>\n        <span>{isSelectedAll ? selectedAllValue.label : typeof unit === 'function' ? unit(value.length) : value.length}</span>\n      </Flex>\n      <span>\n        <Checkbox\n          checked={isSelectedAll}\n          onChange={e => {\n            const checked = e.target.checked;\n            if (!checked) {\n              setValue([]);\n            } else {\n              setValue([selectedAllValue]);\n            }\n          }}\n        >\n          {formatMessage({ id: 'selectAll' })}\n        </Checkbox>\n      </span>\n    </Flex>\n  )\n});\n\nexport const computedIsSelectAll = (value, selectedAllValue, valueKey = 'value') => {\n  return value?.length === 1 && get(value, `[0][${valueKey}]`) === selectedAllValue[valueKey];\n};\n\nexport default SelectedAll;\n","import React from 'react';\nimport { Flex, Tag } from 'antd';\nimport { useContext } from '../SelectInput';\nimport SimpleBar from 'simplebar-react';\nimport classnames from 'classnames';\nimport { createWithIntlProvider, useIntl } from '@kne/react-intl';\nimport style from './style.module.scss';\nimport 'simplebar-react/dist/simplebar.min.css';\n\nimport zhCn from '../locale/zh-CN';\n\nconst SelectedTagList = createWithIntlProvider('zh-CN', zhCn, 'super-select')(() => {\n  const { formatMessage } = useIntl();\n  const { props, value, onRemove } = useContext();\n  const { single, maxLength, labelKey, valueKey } = Object.assign({}, props);\n\n  return (\n    <Flex className={classnames(style['tag-list'], 'selected-tag-list')} gap={8}>\n      <div className={style['label']}>\n        {formatMessage({ id: 'selected' })}\n        {!single && value.length > 0 && `(${value.length}${Number.isInteger(maxLength) ? `/${maxLength}` : ''})`}:\n      </div>\n      <SimpleBar className={style['tag-container']}>\n        <Flex gap={8} wrap className={style['tag-container-inner']}>\n          {value.map(item => {\n            return (\n              <Tag\n                className={style['tag']}\n                key={item[valueKey]}\n                closable\n                bordered={false}\n                onClose={e => {\n                  e.preventDefault();\n                  onRemove(item);\n                }}\n              >\n                <span className={style['tag-inner']}>{item[labelKey]}</span>\n              </Tag>\n            );\n          })}\n        </Flex>\n      </SimpleBar>\n    </Flex>\n  );\n});\n\nexport default SelectedTagList;\n","import React, { forwardRef, useRef } from 'react';\nimport { Flex, List, Checkbox, Empty } from 'antd';\nimport { CheckOutlined } from '@ant-design/icons';\nimport SelectInput from '../SelectInput';\nimport SearchInput from '@kne/search-input';\nimport SelectedAll, { computedIsSelectAll } from '../SelectedAll';\nimport SelectedTagList from '../SelectedTagList';\nimport { FetchScrollLoader } from '@kne/scroll-loader';\nimport '@kne/scroll-loader/dist/index.css';\nimport classnames from 'classnames';\nimport style from './style.module.scss';\n\nconst SelectList = forwardRef(({ children, ...p }, ref) => {\n  const fetchListRef = useRef(null);\n  const props = Object.assign(\n    {},\n    {\n      renderItemContent: ({ item, props }) => {\n        const { labelKey } = props;\n        return (\n          <>\n            <div className={'select-list-item-label'}>{item[labelKey]}</div>\n            {item.description && <div className={classnames(style['select-list-item-description'], 'select-list-item-description')}>{item.description}</div>}\n          </>\n        );\n      },\n      renderItem: contextProps => {\n        const { item, props, isSelectedAll, value, onSelect, setValue, onOpenChange } = contextProps;\n        const { single, isPopup, renderItemContent, valueKey } = props;\n        const isChecked = value.some(target => target[valueKey] === item[valueKey]);\n        return (\n          <List.Item\n            className={classnames(style['default-list-item'], 'select-list-item', {\n              [style['is-selected']]: isChecked,\n              [style['is-disabled']]: item.disabled\n            })}\n            key={item[valueKey]}\n            onClick={() => {\n              if (item.disabled) {\n                return;\n              }\n              if (isSelectedAll) {\n                return;\n              }\n              if (single) {\n                setValue([item]);\n              } else {\n                onSelect(item);\n              }\n              if (isPopup && single) {\n                onOpenChange(false);\n              }\n            }}\n          >\n            {!single && (\n              <Flex>\n                <Checkbox checked={isSelectedAll || isChecked} disabled={isSelectedAll || item.disabled} />\n              </Flex>\n            )}\n            <Flex vertical gag={8} flex={1} className={'select-list-item-content'}>\n              {renderItemContent(contextProps)}\n            </Flex>\n            {single && <div className={style['single-checked']}>{isChecked && <CheckOutlined />}</div>}\n          </List.Item>\n        );\n      },\n      renderList: contextProps => {\n        const { props, isSelectedAll, list } = contextProps;\n        const { renderItem } = props;\n        if (!(list && list.length > 0)) {\n          return props.empty || <Empty className={style['empty']} />;\n        }\n        return (\n          <List\n            className={classnames(style['default-list'], {\n              [style['is-selected-all']]: isSelectedAll\n            })}\n            size=\"small\"\n            dataSource={list}\n            renderItem={item => renderItem(Object.assign({}, contextProps, { item }))}\n          />\n        );\n      }\n    },\n    p\n  );\n  return (\n    <SelectInput {...props} ref={ref}>\n      {targetProps => {\n        const { props, value, searchProps, setSearchProps, onOpenChange } = targetProps;\n        const { footer, isPopup, getSearchProps, getSearchCallback, searchPlaceholder, valueKey, single, allowSelectedAll, showSelectedTag, api, options, renderList, selectedAllValue } = props;\n        const components = {\n          search: ((api && typeof getSearchProps === 'function') || (options && typeof getSearchCallback === 'function')) && (\n            <SearchInput\n              className={classnames(style['select-search'], 'select-list-search', {\n                'is-popup': isPopup\n              })}\n              placeholder={searchPlaceholder}\n              value={searchProps.searchText}\n              onSearch={value => {\n                setSearchProps(searchProps => Object.assign({}, searchProps, { searchText: value }));\n              }}\n              simple={isPopup}\n              showSearchButton={!isPopup}\n            />\n          ),\n          selectedAll: (\n            <div\n              className={classnames(style['selected-all'], 'select-list-selected-all', {\n                'is-popup': isPopup\n              })}\n            >\n              {!single && allowSelectedAll && <SelectedAll />}\n            </div>\n          ),\n          fetchList: (\n            <FetchScrollLoader\n              {...props}\n              className={classnames(style['list'], 'select-list-scroll-list', {\n                'is-popup': isPopup\n              })}\n              searchProps={searchProps}\n              getSearchProps={getSearchProps}\n              api={Object.assign(\n                {},\n                options\n                  ? {\n                      data: { options, searchProps },\n                      loader: ({ data }) => {\n                        const { options, searchProps } = data;\n                        if (typeof getSearchCallback === 'function') {\n                          const newOptions = options.filter(item => getSearchCallback(searchProps, item));\n                          return {\n                            pageData: newOptions\n                          };\n                        }\n                        return {\n                          pageData: options\n                        };\n                      }\n                    }\n                  : api\n              )}\n              ref={fetchListRef}\n            >\n              {fetchProps => {\n                const isSelectedAll = computedIsSelectAll(value, selectedAllValue, valueKey);\n                return renderList(Object.assign({}, fetchProps, targetProps, { isSelectedAll }));\n              }}\n            </FetchScrollLoader>\n          ),\n          selectedTag: showSelectedTag && (\n            <div\n              className={classnames(style['selected-tag'], 'select-list-selected-tag', {\n                'is-popup': isPopup\n              })}\n            >\n              <SelectedTagList />\n            </div>\n          ),\n          footer: footer && (\n            <div className={classnames(style['footer'], 'select-list-footer')}>\n              {typeof footer === 'function'\n                ? footer({\n                    reload: () => {\n                      fetchListRef.current && fetchListRef.current.reload();\n                    },\n                    close: () => {\n                      onOpenChange(false);\n                    }\n                  })\n                : footer}\n            </div>\n          )\n        };\n        if (typeof children === 'function') {\n          return children(Object.assign({}, targetProps, { components }));\n        }\n        return (\n          <Flex vertical>\n            {components.search}\n            {components.selectedAll}\n            {components.fetchList}\n            {components.footer}\n            {components.selectedTag}\n          </Flex>\n        );\n      }}\n    </SelectInput>\n  );\n});\n\nexport default SelectList;\n","import React, { useState, Fragment, useRef, forwardRef } from 'react';\nimport SelectInput from '../SelectInput';\nimport { Flex, Row, Col, Button, Checkbox, Tag, Popover, Empty } from 'antd';\nimport { FetchScrollLoader } from '@kne/scroll-loader';\nimport SearchInput from '@kne/search-input';\nimport { computedIsSelectAll } from '../SelectedAll';\nimport get from 'lodash/get';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport { createWithIntlProvider, useIntl } from '@kne/react-intl';\nimport style from './style.module.scss';\nimport 'simplebar-react/dist/simplebar.min.css';\nimport { CheckOutlined } from '@ant-design/icons';\n\nimport zhCn from '../locale/zh-CN';\n\nconst SelectTableList = createWithIntlProvider(\n  'zh-CN',\n  zhCn,\n  'super-select'\n)(\n  forwardRef((p, ref) => {\n    const { formatMessage } = useIntl();\n    const [tagSearchText, setTagSearchText] = useState('');\n    const fetchListRef = useRef();\n    const props = Object.assign(\n      {},\n      {\n        overlayWidth: '600px',\n        filterRender: contextProps => {\n          const { props, searchProps, setSearchProps } = contextProps;\n          const { isPopup, searchPlaceholder, api, getSearchProps, options, getSearchCallback, labelKey } = props;\n          if (!((api && typeof getSearchProps === 'function') || (options && typeof getSearchCallback === 'function'))) {\n            return null;\n          }\n          return (\n            <SearchInput\n              className={classnames(style['select-search'], 'select-list-search', {\n                'is-popup': isPopup\n              })}\n              placeholder={searchPlaceholder}\n              value={searchProps.searchText || ''}\n              onSearch={value => {\n                setSearchProps(searchProps => Object.assign({}, searchProps, { searchText: value }));\n              }}\n              simple={isPopup}\n              showSearchButton={!isPopup}\n            />\n          );\n        },\n        getTagSearchCallback: (tagSearchText, item, contextProps) => {\n          const { props } = contextProps;\n          const { labelKey } = props;\n          if (!tagSearchText) {\n            return true;\n          }\n          return item[labelKey].indexOf(tagSearchText) > -1;\n        }\n      },\n      p\n    );\n\n    const bodyRef = useRef(null);\n\n    return (\n      <SelectInput {...props} ref={ref}>\n        {targetProps => {\n          const { props, value, setValue, onSelect, onRemove, onOpenChange } = targetProps;\n          const { footer, filterRender, columns, options, getSearchCallback, getTagSearchCallback, api, selectedAllValue, isPopup, single, maxLength, getSearchProps, searchPlaceholder, allowSelectedAll, labelKey, valueKey, searchProps } =\n            props;\n          const isSelectedAll = computedIsSelectAll(value, selectedAllValue, valueKey);\n\n          const footerEl = footer && (\n            <div className={classnames(style['footer'], 'select-table-footer')}>\n              {typeof footer === 'function'\n                ? footer({\n                    reload: () => {\n                      fetchListRef.current && fetchListRef.current.reload();\n                    },\n                    close: () => {\n                      onOpenChange(false);\n                    }\n                  })\n                : footer}\n            </div>\n          );\n          return (\n            <Row wrap={false} ref={bodyRef}>\n              <Col\n                className={classnames({\n                  [style['single-body']]: single\n                })}\n                span={single ? 24 : 16}\n              >\n                <div>{filterRender(Object.assign({}, targetProps))}</div>\n                <Row wrap={false} className={classnames(style['header'], 'select-table-list-header')}>\n                  {!single && (\n                    <Col className={classnames(style['col'], 'select-table-list-col')}>\n                      {allowSelectedAll ? (\n                        <Checkbox\n                          checked={isSelectedAll}\n                          onChange={e => {\n                            const checked = e.target.checked;\n                            if (!checked) {\n                              setValue([]);\n                            } else {\n                              setValue([selectedAllValue]);\n                            }\n                          }}\n                        />\n                      ) : (\n                        <Checkbox style={{ visibility: 'hidden' }} />\n                      )}\n                    </Col>\n                  )}\n                  <Col flex={1}>\n                    <Row wrap={false}>\n                      {columns.map(column => {\n                        const { name, title, span } = column;\n                        return (\n                          <Col key={name} span={span} className={classnames(style['col'], 'select-table-list-col')}>\n                            {title}\n                          </Col>\n                        );\n                      })}\n                    </Row>\n                  </Col>\n                </Row>\n                <FetchScrollLoader\n                  {...props}\n                  className={classnames(style['list'], 'select-table-list-scroll-list', {\n                    'is-popup': isPopup\n                  })}\n                  searchProps={searchProps}\n                  getSearchProps={getSearchProps}\n                  api={Object.assign(\n                    {},\n                    options\n                      ? {\n                          data: { options, searchProps },\n                          loader: ({ data }) => {\n                            const { options, searchProps } = data;\n                            if (typeof getSearchCallback === 'function') {\n                              const newOptions = options.filter(item => getSearchCallback(searchProps, item, targetProps));\n                              return {\n                                pageData: newOptions\n                              };\n                            }\n                            return {\n                              pageData: options\n                            };\n                          }\n                        }\n                      : api\n                  )}\n                  ref={fetchListRef}\n                >\n                  {fetchProps => {\n                    const { list } = fetchProps;\n                    const contextProps = Object.assign({}, fetchProps, targetProps, { isSelectedAll });\n                    if (!(list && list.length > 0)) {\n                      return props.empty || <Empty className={classnames(style['empty'], style['body'], 'select-table-list-body')} />;\n                    }\n                    return list.map(item => {\n                      const isChecked = value.some(target => target[valueKey] === item[valueKey]);\n                      return (\n                        <Row\n                          wrap={false}\n                          key={item[valueKey]}\n                          className={classnames(style['body'], 'select-table-list-body', [\n                            {\n                              [style['is-selected-all']]: isSelectedAll,\n                              [style['is-selected']]: isChecked,\n                              [style['is-disabled']]: item.disabled\n                            }\n                          ])}\n                          onClick={() => {\n                            if (item.disabled) {\n                              return;\n                            }\n                            if (isSelectedAll) {\n                              return;\n                            }\n                            if (single) {\n                              setValue([item]);\n                            } else {\n                              onSelect(item);\n                            }\n                            if (isPopup && single) {\n                              onOpenChange(false);\n                            }\n                          }}\n                        >\n                          {!single && (\n                            <Col className={classnames(style['col'], 'select-table-list-col')}>\n                              <Checkbox disabled={item.disabled || isSelectedAll} checked={isSelectedAll || isChecked} />\n                            </Col>\n                          )}\n                          <Col flex={1}>\n                            <Row wrap={false}>\n                              {columns.map(column => {\n                                const { name, span, getValueOf } = column;\n                                return (\n                                  <Col key={name} span={span} className={classnames(style['col'], 'select-table-list-col')}>\n                                    {typeof getValueOf === 'function' ? getValueOf(item, contextProps) : get(item, name)}\n                                  </Col>\n                                );\n                              })}\n                            </Row>\n                          </Col>\n                          {single && <Col className={classnames(style['col'], style['single-checked'], 'select-table-list-col')}>{isChecked && <CheckOutlined />}</Col>}\n                        </Row>\n                      );\n                    });\n                  }}\n                </FetchScrollLoader>\n                {(single && footerEl) || <div className={classnames(style['footer'], 'select-table-footer')} />}\n              </Col>\n              {!single && (\n                <Col\n                  className={classnames(style['right-options'], {\n                    'is-popup': isPopup\n                  })}\n                  span={8}\n                >\n                  <SearchInput\n                    className={style['tags-search']}\n                    placeholder={searchPlaceholder}\n                    value={tagSearchText}\n                    onSearch={value => {\n                      setTagSearchText(value);\n                    }}\n                    showSearchButton={false}\n                  />\n                  <Row wrap={false} justify={'space-between'} align={'middle'}>\n                    <Col>\n                      {formatMessage({ id: 'selected' })}\n                      {value.length > 0 && `(${value.length}${Number.isInteger(maxLength) ? `/${maxLength}` : ''})`}:\n                    </Col>\n                    <Col>\n                      <Button\n                        className={style['no-padding-btn']}\n                        type=\"link\"\n                        onClick={() => {\n                          setValue([]);\n                        }}\n                      >\n                        移除全部\n                      </Button>\n                    </Col>\n                  </Row>\n                  <SimpleBar>\n                    <Flex wrap gap={8}>\n                      {value\n                        .filter(item => getTagSearchCallback(tagSearchText, item, targetProps))\n                        .map(item => {\n                          return (\n                            <Tag\n                              className={style['tag']}\n                              key={item[valueKey]}\n                              closable\n                              bordered={false}\n                              onClose={e => {\n                                e.preventDefault();\n                                onRemove(item);\n                              }}\n                            >\n                              <Popover\n                                getPopupContainer={() => bodyRef.current}\n                                content={\n                                  <Row className={style['descriptions']}>\n                                    {columns.map(({ name, title, getValueOf }) => {\n                                      return (\n                                        <Fragment key={name}>\n                                          <Col span={8} className={style['descriptions-col-label']}>\n                                            {title}\n                                          </Col>\n                                          <Col className={style['descriptions-col-content']} span={16}>\n                                            {typeof getValueOf === 'function' ? getValueOf(item, targetProps) : get(item, name)}\n                                          </Col>\n                                        </Fragment>\n                                      );\n                                    })}\n                                  </Row>\n                                }\n                              >\n                                <span className={style['tag-inner']}>{item[labelKey]}</span>\n                              </Popover>\n                            </Tag>\n                          );\n                        })}\n                    </Flex>\n                  </SimpleBar>\n                  {footerEl}\n                </Col>\n              )}\n            </Row>\n          );\n        }}\n      </SelectInput>\n    );\n  })\n);\n\nexport default SelectTableList;\n","import React, { forwardRef, useRef, useState } from 'react';\nimport { Flex, Checkbox, Tree, Empty } from 'antd';\nimport memoize from 'lodash/memoize';\nimport isNil from 'lodash/isNil';\nimport { CheckOutlined } from '@ant-design/icons';\nimport SelectInput from '../SelectInput';\nimport SelectedAll, { computedIsSelectAll } from '../SelectedAll';\nimport SelectedTagList from '../SelectedTagList';\nimport SimpleBar from 'simplebar-react';\nimport Fetch from '@kne/react-fetch';\nimport 'simplebar-react/dist/simplebar.min.css';\nimport classnames from 'classnames';\nimport style from './style.module.scss';\n\nconst parseTreeData = memoize((data = [], { parentKey, valueKey, childrenKey }) => {\n  const parseTree = output => {\n    return output.map(node => {\n      const children = data.filter(item => {\n        return !isNil(node[valueKey]) && item[parentKey] === node[valueKey];\n      });\n      return Object.assign({}, node, { [childrenKey]: parseTree(children) });\n    });\n  };\n\n  return {\n    treeData: parseTree(data.filter(item => !item[parentKey])),\n    ids: data.map(item => item.id)\n  };\n});\n\nconst SelectTree = forwardRef(({ children, ...p }, ref) => {\n  const fetchListRef = useRef(null);\n  const [expandedKeys, setExpandedKeys] = useState([]);\n  const props = Object.assign(\n    {},\n    {\n      parentKey: 'parentId',\n      childrenKey: 'children',\n      renderItemContent: ({ item, props }) => {\n        const { labelKey } = props;\n        return (\n          <>\n            <div className={'select-tree-item-label'}>{item[labelKey]}</div>\n          </>\n        );\n      },\n      renderItem: contextProps => {\n        const { item, props, isSelectedAll, value, onSelect, setValue, onOpenChange } = contextProps;\n        const { single, isPopup, renderItemContent, valueKey } = props;\n        const isChecked = value.some(target => target[valueKey] === item[valueKey]);\n        return (\n          <Flex\n            className={classnames(style['default-list-item'], 'select-tree-item', {\n              [style['is-selected']]: isChecked,\n              [style['is-disabled']]: item.disabled\n            })}\n            key={item[valueKey]}\n            onClick={() => {\n              if (item.disabled) {\n                return;\n              }\n              if (isSelectedAll) {\n                return;\n              }\n              if (single) {\n                setValue([item]);\n              } else {\n                onSelect(item);\n              }\n              if (isPopup && single) {\n                onOpenChange(false);\n              }\n            }}\n          >\n            {!single && (\n              <Flex>\n                <Checkbox checked={isSelectedAll || isChecked} disabled={isSelectedAll || item.disabled} />\n              </Flex>\n            )}\n            <Flex vertical gag={8} flex={1} className={'select-tree-item-content'}>\n              {renderItemContent(contextProps)}\n            </Flex>\n            {single && <div className={style['single-checked']}>{isChecked && <CheckOutlined />}</div>}\n          </Flex>\n        );\n      },\n      renderTree: contextProps => {\n        const { props, isSelectedAll, data } = contextProps;\n        const { renderItem, valueKey, labelKey, childrenKey, parentKey } = props;\n        const { treeData, ids } = parseTreeData(data, { valueKey, parentKey, childrenKey });\n        if (!(treeData && treeData.length > 0)) {\n          return props.empty || <Empty />;\n        }\n        return (\n          <Tree\n            className={classnames(style['default-list'], {\n              [style['is-selected-all']]: isSelectedAll\n            })}\n            showIcon\n            selectable={false}\n            expandedKeys={expandedKeys}\n            fieldNames={{ title: labelKey, key: valueKey, children: childrenKey }}\n            treeData={treeData}\n            onExpand={expandedKeys => {\n              setExpandedKeys(expandedKeys);\n            }}\n            titleRender={node => {\n              return renderItem(Object.assign({}, contextProps, { item: node }));\n            }}\n          />\n        );\n      }\n    },\n    p\n  );\n  return (\n    <SelectInput {...props} ref={ref}>\n      {targetProps => {\n        const { props, value, onOpenChange } = targetProps;\n        const { footer, isPopup, valueKey, single, allowSelectedAll, showSelectedTag, api, options, renderTree, selectedAllValue } = props;\n        const components = {\n          selectedAll: (\n            <div\n              className={classnames(style['selected-all'], 'select-tree-selected-all', {\n                'is-popup': isPopup\n              })}\n            >\n              {!single && allowSelectedAll && <SelectedAll />}\n            </div>\n          ),\n          treeList: (\n            <Fetch\n              {...Object.assign(\n                {},\n                options\n                  ? {\n                      data: { options },\n                      loader: ({ data }) => data.options\n                    }\n                  : api\n              )}\n              ref={fetchListRef}\n              render={({ data, ...fetchProps }) => {\n                const isSelectedAll = computedIsSelectAll(value, selectedAllValue, valueKey);\n                return (\n                  <SimpleBar\n                    className={classnames(style['list'], 'select-tree-scroll-list', {\n                      'is-popup': isPopup\n                    })}\n                  >\n                    {renderTree(Object.assign({}, fetchProps, targetProps, { isSelectedAll, data }))}\n                  </SimpleBar>\n                );\n              }}\n            />\n          ),\n          selectedTag: showSelectedTag && (\n            <div\n              className={classnames(style['selected-tag'], 'select-tree-selected-tag', {\n                'is-popup': isPopup\n              })}\n            >\n              <SelectedTagList />\n            </div>\n          ),\n          footer: footer && (\n            <div className={classnames(style['footer'], 'select-list-footer')}>\n              {typeof footer === 'function'\n                ? footer({\n                    reload: () => {\n                      fetchListRef.current && fetchListRef.current.reload();\n                    },\n                    close: () => {\n                      onOpenChange(false);\n                    }\n                  })\n                : footer}\n            </div>\n          )\n        };\n        if (typeof children === 'function') {\n          return children(Object.assign({}, targetProps, { components }));\n        }\n        return (\n          <Flex vertical>\n            {components.search}\n            {components.selectedAll}\n            {components.treeList}\n            {components.footer}\n            {components.selectedTag}\n          </Flex>\n        );\n      }}\n    </SelectInput>\n  );\n});\n\nexport default SelectTree;\n"],"names":["context","createContext","Provider","useContext","locale$1","placeholder","selectAll","selected","search","numberOf","maxLengthError","defaultChildren","ModalContent","_ref","children","others","_objectWithoutPropertiesLoose","_excluded$2","open","value","propsValue","setValue","useState","useEffect","isEqual","contextProps","Object","assign","onComplete","onAdd","item","onSelect","onRemove","React","SelectInput","createWithIntlProvider","defaultLocale","namespace","messages","forwardRef","p","ref","intl","useIntl","formatMessage","props","id","maxLength","defaultOpen","single","disabled","isPopup","searchPlaceholder","completeTips","allowSelectedAll","labelKey","valueKey","selectedAllValue","label","placement","labelWrap","showSelectedTag","allowClear","prefix","suffix","extra","renderModal","onOpenChange","Modal","width","title","onCancel","onOk","className","overlayClassName","overlayWidth","transformValue","isNotEmpty","Array","isArray","useControlValue","onChange","last","defaultValue","searchProps","setSearchProps","setOpen","hover","setHover","inputWidth","setInputWidth","inputRef","useResize","el","clientWidth","popupOverlayWidth","val","Math","max","Number","isInteger","match","toString","pxToNumber","concat","message","App","useApp","checkMaxLength","length","error","currentSetValue","newValue","slice","index","findIndex","currentItem","splice","push","inputInnerRender","arguments","undefined","inputRender","Flex","_extends","classnames","style$5","justify","onMouseOver","onMouseOut","current","onClick","e","stopPropagation","map","Tag","key","closable","bordered","onClose","preventDefault","CloseCircleFilled","DownOutlined","useImperativeHandle","Dropdown","arrow","trigger","popupRender","style","SelectedAll","unit","number","isSelectedAll","computedIsSelectAll","style$4","gap","Checkbox","checked","target","get","SelectedTagList","style$3","SimpleBar","wrap","SelectList","_excluded$1","fetchListRef","useRef","renderItemContent","_ref3","description","style$2","renderItem","isChecked","some","List","Item","vertical","gag","flex","CheckOutlined","renderList","list","size","dataSource","empty","Empty","targetProps","footer","getSearchProps","getSearchCallback","api","options","components","SearchInput","searchText","onSearch","simple","showSearchButton","selectedAll","fetchList","FetchScrollLoader","data","loader","_ref4","pageData","filter","fetchProps","selectedTag","reload","close","SelectTableList","tagSearchText","setTagSearchText","filterRender","style$1","getTagSearchCallback","indexOf","bodyRef","columns","footerEl","Row","Col","span","visibility","column","name","_ref5","getValueOf","align","Button","type","Popover","getPopupContainer","content","_ref6","Fragment","parseTreeData","memoize","parentKey","childrenKey","parseTree","output","node","isNil","treeData","ids","SelectTree","_excluded","expandedKeys","setExpandedKeys","_ref7","renderTree","Tree","showIcon","selectable","fieldNames","onExpand","titleRender","treeList","Fetch","_ref8","render","_ref2","_excluded2"],"sourceRoot":""}